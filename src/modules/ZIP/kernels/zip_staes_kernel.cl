/* 
 * Copyright (C) 2016 Vojtech Vecera
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy 
 * of this software and associated documentation files (the "Software"), to deal 
 * in the Software without restriction, including without limitation the rights 
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
 * copies of the Software, and to permit persons to whom the Software is 
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
 * SOFTWARE.
 * 
 */

#pragma OPENCL EXTENSION cl_amd_printf : enable 


/***************************************************************************
 * This code is based on public domain Szymon Stefanek AES implementation: *
 * http://www.pragmaware.net/software/rijndael/index.php                   *
 ***************************************************************************/
#define _MAX_KEY_COLUMNS (256/32)
#define _MAX_ROUNDS      14
#define MAX_IV_SIZE      16

typedef struct {
    bool     CBCMode;
    int      m_uRounds;
    uchar     m_initVector[MAX_IV_SIZE];
    uchar     m_expandedKey[_MAX_ROUNDS+1][4][4];
} aes_context;

static constant uint crc32_tab[] = {
    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,
    0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
    0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,
    0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
    0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,
    0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,
    0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,
    0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,
    0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
    0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,
    0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
    0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,
    0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,
    0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
    0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,
    0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
    0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,
    0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,
    0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,
    0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,
    0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
    0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,
    0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
    0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,
    0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
    0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
};
static constant uchar S[256]= {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x8,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 
    0xb5, 0x66, 0x48, 0x3, 0xf6, 0xe, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 
    0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 
    0xd, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0xf, 0xb0, 0x54, 0xbb, 0x16};
static constant uchar S5[256]={
0x52, 0x9, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 
0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 
0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0xb, 0x42, 0xfa, 0xc3, 0x4e, 0x8, 
0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 
0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 
0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 
0xd8, 0xab, 0x0, 0x8c, 0xbc, 0xd3, 0xa, 0xf7, 0xe4, 0x58, 0x5, 0xb8, 0xb3, 0x45, 0x6, 0xd0, 0x2c, 
0x1e, 0x8f, 0xca, 0x3f, 0xf, 0x2, 0xc1, 0xaf, 0xbd, 0x3, 0x1, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 
0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 
0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 
0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0xe, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 
0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 
0x33, 0x88, 0x7, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 
0xa9, 0x19, 0xb5, 0x4a, 0xd, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 
0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x4, 
0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0xc, 0x7d};
static constant uchar rcon[30]={0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 
    0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91};
static constant uchar T5[256][4]= {{0x51, 0xf4, 0xa7, 0x50}, {0x7e, 0x41, 0x65, 0x53}, {0x1a, 0x17, 0xa4, 0xc3}, {0x3a, 0x27, 
    0x5e, 0x96}, {0x3b, 0xab, 0x6b, 0xcb}, {0x1f, 0x9d, 0x45, 0xf1}, {0xac, 0xfa, 0x58, 0xab}, {0x4b, 
	0xe3, 0x3, 0x93}, {0x20, 0x30, 0xfa, 0x55}, {0xad, 0x76, 0x6d, 0xf6}, {0x88, 0xcc, 0x76, 0x91}, {
	    0xf5, 0x2, 0x4c, 0x25}, {0x4f, 0xe5, 0xd7, 0xfc}, {0xc5, 0x2a, 0xcb, 0xd7}, {0x26, 0x35, 0x44, 
		0x80}, {0xb5, 0x62, 0xa3, 0x8f}, {0xde, 0xb1, 0x5a, 0x49}, {0x25, 0xba, 0x1b, 0x67}, {0x45, 0xea, 
		    0xe, 0x98}, {0x5d, 0xfe, 0xc0, 0xe1}, {0xc3, 0x2f, 0x75, 0x2}, {0x81, 0x4c, 0xf0, 0x12}, {0x8d, 
			0x46, 0x97, 0xa3}, {0x6b, 0xd3, 0xf9, 0xc6}, {0x3, 0x8f, 0x5f, 0xe7}, {0x15, 0x92, 0x9c, 0x95}, {
			    0xbf, 0x6d, 0x7a, 0xeb}, {0x95, 0x52, 0x59, 0xda}, {0xd4, 0xbe, 0x83, 0x2d}, {0x58, 0x74, 0x21, 
				0xd3}, {0x49, 0xe0, 0x69, 0x29}, {0x8e, 0xc9, 0xc8, 0x44}, {0x75, 0xc2, 0x89, 0x6a}, {0xf4, 0x8e, 
				    0x79, 0x78}, {0x99, 0x58, 0x3e, 0x6b}, {0x27, 0xb9, 0x71, 0xdd}, {0xbe, 0xe1, 0x4f, 0xb6}, {0xf0, 
					0x88, 0xad, 0x17}, {0xc9, 0x20, 0xac, 0x66}, {0x7d, 0xce, 0x3a, 0xb4}, {0x63, 0xdf, 0x4a, 0x18}, {
					    0xe5, 0x1a, 0x31, 0x82}, {0x97, 0x51, 0x33, 0x60}, {0x62, 0x53, 0x7f, 0x45}, {0xb1, 0x64, 0x77, 
						0xe0}, {0xbb, 0x6b, 0xae, 0x84}, {0xfe, 0x81, 0xa0, 0x1c}, {0xf9, 0x8, 0x2b, 0x94}, {0x70, 0x48, 
						    0x68, 0x58}, {0x8f, 0x45, 0xfd, 0x19}, {0x94, 0xde, 0x6c, 0x87}, {0x52, 0x7b, 0xf8, 0xb7}, {0xab, 
							0x73, 0xd3, 0x23}, {0x72, 0x4b, 0x2, 0xe2}, {0xe3, 0x1f, 0x8f, 0x57}, {0x66, 0x55, 0xab, 0x2a}, {
							    0xb2, 0xeb, 0x28, 0x7}, {0x2f, 0xb5, 0xc2, 0x3}, {0x86, 0xc5, 0x7b, 0x9a}, {0xd3, 0x37, 0x8, 
								0xa5}, {0x30, 0x28, 0x87, 0xf2}, {0x23, 0xbf, 0xa5, 0xb2}, {0x2, 0x3, 0x6a, 0xba}, {0xed, 0x16, 
								    0x82, 0x5c}, {0x8a, 0xcf, 0x1c, 0x2b}, {0xa7, 0x79, 0xb4, 0x92}, {0xf3, 0x7, 0xf2, 0xf0}, {0x4e, 
									0x69, 0xe2, 0xa1}, {0x65, 0xda, 0xf4, 0xcd}, {0x6, 0x5, 0xbe, 0xd5}, {0xd1, 0x34, 0x62, 0x1f}, {
									    0xc4, 0xa6, 0xfe, 0x8a}, {0x34, 0x2e, 0x53, 0x9d}, {0xa2, 0xf3, 0x55, 0xa0}, {0x5, 0x8a, 0xe1, 
										0x32}, {0xa4, 0xf6, 0xeb, 0x75}, {0xb, 0x83, 0xec, 0x39}, {0x40, 0x60, 0xef, 0xaa}, {0x5e, 0x71, 
										    0x9f, 0x6}, {0xbd, 0x6e, 0x10, 0x51}, {0x3e, 0x21, 0x8a, 0xf9}, {0x96, 0xdd, 0x6, 0x3d}, {0xdd, 
											0x3e, 0x5, 0xae}, {0x4d, 0xe6, 0xbd, 0x46}, {0x91, 0x54, 0x8d, 0xb5}, {0x71, 0xc4, 0x5d, 0x5}, {
											    0x4, 0x6, 0xd4, 0x6f}, {0x60, 0x50, 0x15, 0xff}, {0x19, 0x98, 0xfb, 0x24}, {0xd6, 0xbd, 0xe9, 
												0x97}, {0x89, 0x40, 0x43, 0xcc}, {0x67, 0xd9, 0x9e, 0x77}, {0xb0, 0xe8, 0x42, 0xbd}, {0x7, 0x89, 
												    0x8b, 0x88}, {0xe7, 0x19, 0x5b, 0x38}, {0x79, 0xc8, 0xee, 0xdb}, {0xa1, 0x7c, 0xa, 0x47}, {0x7c, 
													0x42, 0xf, 0xe9}, {0xf8, 0x84, 0x1e, 0xc9}, {0x0, 0x0, 0x0, 0x0}, {0x9, 0x80, 0x86, 0x83}, {0x32, 
													    0x2b, 0xed, 0x48}, {0x1e, 0x11, 0x70, 0xac}, {0x6c, 0x5a, 0x72, 0x4e}, {0xfd, 0xe, 0xff, 0xfb}, {
														0xf, 0x85, 0x38, 0x56}, {0x3d, 0xae, 0xd5, 0x1e}, {0x36, 0x2d, 0x39, 0x27}, {0xa, 0xf, 0xd9, 
														    0x64}, {0x68, 0x5c, 0xa6, 0x21}, {0x9b, 0x5b, 0x54, 0xd1}, {0x24, 0x36, 0x2e, 0x3a}, {0xc, 0xa, 
															0x67, 0xb1}, {0x93, 0x57, 0xe7, 0xf}, {0xb4, 0xee, 0x96, 0xd2}, {0x1b, 0x9b, 0x91, 0x9e}, {0x80, 
															    0xc0, 0xc5, 0x4f}, {0x61, 0xdc, 0x20, 0xa2}, {0x5a, 0x77, 0x4b, 0x69}, {0x1c, 0x12, 0x1a, 0x16}, {
																0xe2, 0x93, 0xba, 0xa}, {0xc0, 0xa0, 0x2a, 0xe5}, {0x3c, 0x22, 0xe0, 0x43}, {0x12, 0x1b, 0x17, 
																    0x1d}, {0xe, 0x9, 0xd, 0xb}, {0xf2, 0x8b, 0xc7, 0xad}, {0x2d, 0xb6, 0xa8, 0xb9}, {0x14, 0x1e, 
																	0xa9, 0xc8}, {0x57, 0xf1, 0x19, 0x85}, {0xaf, 0x75, 0x7, 0x4c}, {0xee, 0x99, 0xdd, 0xbb}, {0xa3, 
																	    0x7f, 0x60, 0xfd}, {0xf7, 0x1, 0x26, 0x9f}, {0x5c, 0x72, 0xf5, 0xbc}, {0x44, 0x66, 0x3b, 0xc5}, {
																		0x5b, 0xfb, 0x7e, 0x34}, {0x8b, 0x43, 0x29, 0x76}, {0xcb, 0x23, 0xc6, 0xdc}, {0xb6, 0xed, 0xfc, 
																		    0x68}, {0xb8, 0xe4, 0xf1, 0x63}, {0xd7, 0x31, 0xdc, 0xca}, {0x42, 0x63, 0x85, 0x10}, {0x13, 0x97, 
																			0x22, 0x40}, {0x84, 0xc6, 0x11, 0x20}, {0x85, 0x4a, 0x24, 0x7d}, {0xd2, 0xbb, 0x3d, 0xf8}, {0xae, 
																			    0xf9, 0x32, 0x11}, {0xc7, 0x29, 0xa1, 0x6d}, {0x1d, 0x9e, 0x2f, 0x4b}, {0xdc, 0xb2, 0x30, 0xf3}, {
																				0xd, 0x86, 0x52, 0xec}, {0x77, 0xc1, 0xe3, 0xd0}, {0x2b, 0xb3, 0x16, 0x6c}, {0xa9, 0x70, 0xb9, 
																				    0x99}, {0x11, 0x94, 0x48, 0xfa}, {0x47, 0xe9, 0x64, 0x22}, {0xa8, 0xfc, 0x8c, 0xc4}, {0xa0, 0xf0, 
																					0x3f, 0x1a}, {0x56, 0x7d, 0x2c, 0xd8}, {0x22, 0x33, 0x90, 0xef}, {0x87, 0x49, 0x4e, 0xc7}, {0xd9, 
																					    0x38, 0xd1, 0xc1}, {0x8c, 0xca, 0xa2, 0xfe}, {0x98, 0xd4, 0xb, 0x36}, {0xa6, 0xf5, 0x81, 0xcf}, {
																						0xa5, 0x7a, 0xde, 0x28}, {0xda, 0xb7, 0x8e, 0x26}, {0x3f, 0xad, 0xbf, 0xa4}, {0x2c, 0x3a, 0x9d, 
																						    0xe4}, {0x50, 0x78, 0x92, 0xd}, {0x6a, 0x5f, 0xcc, 0x9b}, {0x54, 0x7e, 0x46, 0x62}, {0xf6, 0x8d, 
																							0x13, 0xc2}, {0x90, 0xd8, 0xb8, 0xe8}, {0x2e, 0x39, 0xf7, 0x5e}, {0x82, 0xc3, 0xaf, 0xf5}, {0x9f, 
																							    0x5d, 0x80, 0xbe}, {0x69, 0xd0, 0x93, 0x7c}, {0x6f, 0xd5, 0x2d, 0xa9}, {0xcf, 0x25, 0x12, 0xb3}, {
																								0xc8, 0xac, 0x99, 0x3b}, {0x10, 0x18, 0x7d, 0xa7}, {0xe8, 0x9c, 0x63, 0x6e}, {0xdb, 0x3b, 0xbb, 
																								    0x7b}, {0xcd, 0x26, 0x78, 0x9}, {0x6e, 0x59, 0x18, 0xf4}, {0xec, 0x9a, 0xb7, 0x1}, {0x83, 0x4f, 
																									0x9a, 0xa8}, {0xe6, 0x95, 0x6e, 0x65}, {0xaa, 0xff, 0xe6, 0x7e}, {0x21, 0xbc, 0xcf, 0x8}, {0xef, 
																									    0x15, 0xe8, 0xe6}, {0xba, 0xe7, 0x9b, 0xd9}, {0x4a, 0x6f, 0x36, 0xce}, {0xea, 0x9f, 0x9, 0xd4}, {
																										0x29, 0xb0, 0x7c, 0xd6}, {0x31, 0xa4, 0xb2, 0xaf}, {0x2a, 0x3f, 0x23, 0x31}, {0xc6, 0xa5, 0x94, 
																										    0x30}, {0x35, 0xa2, 0x66, 0xc0}, {0x74, 0x4e, 0xbc, 0x37}, {0xfc, 0x82, 0xca, 0xa6}, {0xe0, 0x90, 
																											0xd0, 0xb0}, {0x33, 0xa7, 0xd8, 0x15}, {0xf1, 0x4, 0x98, 0x4a}, {0x41, 0xec, 0xda, 0xf7}, {0x7f, 
																											    0xcd, 0x50, 0xe}, {0x17, 0x91, 0xf6, 0x2f}, {0x76, 0x4d, 0xd6, 0x8d}, {0x43, 0xef, 0xb0, 0x4d}, {
																												0xcc, 0xaa, 0x4d, 0x54}, {0xe4, 0x96, 0x4, 0xdf}, {0x9e, 0xd1, 0xb5, 0xe3}, {0x4c, 0x6a, 0x88, 
																												    0x1b}, {0xc1, 0x2c, 0x1f, 0xb8}, {0x46, 0x65, 0x51, 0x7f}, {0x9d, 0x5e, 0xea, 0x4}, {0x1, 0x8c, 
																													0x35, 0x5d}, {0xfa, 0x87, 0x74, 0x73}, {0xfb, 0xb, 0x41, 0x2e}, {0xb3, 0x67, 0x1d, 0x5a}, {0x92, 
																													    0xdb, 0xd2, 0x52}, {0xe9, 0x10, 0x56, 0x33}, {0x6d, 0xd6, 0x47, 0x13}, {0x9a, 0xd7, 0x61, 0x8c}, {
																														0x37, 0xa1, 0xc, 0x7a}, {0x59, 0xf8, 0x14, 0x8e}, {0xeb, 0x13, 0x3c, 0x89}, {0xce, 0xa9, 0x27, 
																														    0xee}, {0xb7, 0x61, 0xc9, 0x35}, {0xe1, 0x1c, 0xe5, 0xed}, {0x7a, 0x47, 0xb1, 0x3c}, {0x9c, 0xd2, 
																															0xdf, 0x59}, {0x55, 0xf2, 0x73, 0x3f}, {0x18, 0x14, 0xce, 0x79}, {0x73, 0xc7, 0x37, 0xbf}, {0x53, 
																															    0xf7, 0xcd, 0xea}, {0x5f, 0xfd, 0xaa, 0x5b}, {0xdf, 0x3d, 0x6f, 0x14}, {0x78, 0x44, 0xdb, 0x86}, {
																																0xca, 0xaf, 0xf3, 0x81}, {0xb9, 0x68, 0xc4, 0x3e}, {0x38, 0x24, 0x34, 0x2c}, {0xc2, 0xa3, 0x40, 
																																    0x5f}, {0x16, 0x1d, 0xc3, 0x72}, {0xbc, 0xe2, 0x25, 0xc}, {0x28, 0x3c, 0x49, 0x8b}, {0xff, 0xd, 
																																	0x95, 0x41}, {0x39, 0xa8, 0x1, 0x71}, {0x8, 0xc, 0xb3, 0xde}, {0xd8, 0xb4, 0xe4, 0x9c}, {0x64, 
																																	    0x56, 0xc1, 0x90}, {0x7b, 0xcb, 0x84, 0x61}, {0xd5, 0x32, 0xb6, 0x70}, {0x48, 0x6c, 0x5c, 0x74}, {
																																		0xd0, 0xb8, 0x57, 0x42}};
static constant uchar T6[256][4] = {{0x50, 0x51, 0xf4, 0xa7}, {0x53, 0x7e, 0x41, 0x65}, {0xc3, 0x1a, 0x17, 0xa4}, {0x96, 0x3a, 
    0x27, 0x5e}, {0xcb, 0x3b, 0xab, 0x6b}, {0xf1, 0x1f, 0x9d, 0x45}, {0xab, 0xac, 0xfa, 0x58}, {0x93, 
	0x4b, 0xe3, 0x3}, {0x55, 0x20, 0x30, 0xfa}, {0xf6, 0xad, 0x76, 0x6d}, {0x91, 0x88, 0xcc, 0x76}, {
	    0x25, 0xf5, 0x2, 0x4c}, {0xfc, 0x4f, 0xe5, 0xd7}, {0xd7, 0xc5, 0x2a, 0xcb}, {0x80, 0x26, 0x35, 
		0x44}, {0x8f, 0xb5, 0x62, 0xa3}, {0x49, 0xde, 0xb1, 0x5a}, {0x67, 0x25, 0xba, 0x1b}, {0x98, 0x45, 
		    0xea, 0xe}, {0xe1, 0x5d, 0xfe, 0xc0}, {0x2, 0xc3, 0x2f, 0x75}, {0x12, 0x81, 0x4c, 0xf0}, {0xa3, 
			0x8d, 0x46, 0x97}, {0xc6, 0x6b, 0xd3, 0xf9}, {0xe7, 0x3, 0x8f, 0x5f}, {0x95, 0x15, 0x92, 0x9c}, {
			    0xeb, 0xbf, 0x6d, 0x7a}, {0xda, 0x95, 0x52, 0x59}, {0x2d, 0xd4, 0xbe, 0x83}, {0xd3, 0x58, 0x74, 
				0x21}, {0x29, 0x49, 0xe0, 0x69}, {0x44, 0x8e, 0xc9, 0xc8}, {0x6a, 0x75, 0xc2, 0x89}, {0x78, 0xf4, 
				    0x8e, 0x79}, {0x6b, 0x99, 0x58, 0x3e}, {0xdd, 0x27, 0xb9, 0x71}, {0xb6, 0xbe, 0xe1, 0x4f}, {0x17, 
					0xf0, 0x88, 0xad}, {0x66, 0xc9, 0x20, 0xac}, {0xb4, 0x7d, 0xce, 0x3a}, {0x18, 0x63, 0xdf, 0x4a}, {
					    0x82, 0xe5, 0x1a, 0x31}, {0x60, 0x97, 0x51, 0x33}, {0x45, 0x62, 0x53, 0x7f}, {0xe0, 0xb1, 0x64, 
						0x77}, {0x84, 0xbb, 0x6b, 0xae}, {0x1c, 0xfe, 0x81, 0xa0}, {0x94, 0xf9, 0x8, 0x2b}, {0x58, 0x70, 
						    0x48, 0x68}, {0x19, 0x8f, 0x45, 0xfd}, {0x87, 0x94, 0xde, 0x6c}, {0xb7, 0x52, 0x7b, 0xf8}, {0x23, 
							0xab, 0x73, 0xd3}, {0xe2, 0x72, 0x4b, 0x2}, {0x57, 0xe3, 0x1f, 0x8f}, {0x2a, 0x66, 0x55, 0xab}, {
							    0x7, 0xb2, 0xeb, 0x28}, {0x3, 0x2f, 0xb5, 0xc2}, {0x9a, 0x86, 0xc5, 0x7b}, {0xa5, 0xd3, 0x37, 
								0x8}, {0xf2, 0x30, 0x28, 0x87}, {0xb2, 0x23, 0xbf, 0xa5}, {0xba, 0x2, 0x3, 0x6a}, {0x5c, 0xed, 
								    0x16, 0x82}, {0x2b, 0x8a, 0xcf, 0x1c}, {0x92, 0xa7, 0x79, 0xb4}, {0xf0, 0xf3, 0x7, 0xf2}, {0xa1, 
									0x4e, 0x69, 0xe2}, {0xcd, 0x65, 0xda, 0xf4}, {0xd5, 0x6, 0x5, 0xbe}, {0x1f, 0xd1, 0x34, 0x62}, {
									    0x8a, 0xc4, 0xa6, 0xfe}, {0x9d, 0x34, 0x2e, 0x53}, {0xa0, 0xa2, 0xf3, 0x55}, {0x32, 0x5, 0x8a, 
										0xe1}, {0x75, 0xa4, 0xf6, 0xeb}, {0x39, 0xb, 0x83, 0xec}, {0xaa, 0x40, 0x60, 0xef}, {0x6, 0x5e, 
										    0x71, 0x9f}, {0x51, 0xbd, 0x6e, 0x10}, {0xf9, 0x3e, 0x21, 0x8a}, {0x3d, 0x96, 0xdd, 0x6}, {0xae, 
											0xdd, 0x3e, 0x5}, {0x46, 0x4d, 0xe6, 0xbd}, {0xb5, 0x91, 0x54, 0x8d}, {0x5, 0x71, 0xc4, 0x5d}, {
											    0x6f, 0x4, 0x6, 0xd4}, {0xff, 0x60, 0x50, 0x15}, {0x24, 0x19, 0x98, 0xfb}, {0x97, 0xd6, 0xbd, 
												0xe9}, {0xcc, 0x89, 0x40, 0x43}, {0x77, 0x67, 0xd9, 0x9e}, {0xbd, 0xb0, 0xe8, 0x42}, {0x88, 0x7, 
												    0x89, 0x8b}, {0x38, 0xe7, 0x19, 0x5b}, {0xdb, 0x79, 0xc8, 0xee}, {0x47, 0xa1, 0x7c, 0xa}, {0xe9, 
													0x7c, 0x42, 0xf}, {0xc9, 0xf8, 0x84, 0x1e}, {0x0, 0x0, 0x0, 0x0}, {0x83, 0x9, 0x80, 0x86}, {0x48, 
													    0x32, 0x2b, 0xed}, {0xac, 0x1e, 0x11, 0x70}, {0x4e, 0x6c, 0x5a, 0x72}, {0xfb, 0xfd, 0xe, 0xff}, {
														0x56, 0xf, 0x85, 0x38}, {0x1e, 0x3d, 0xae, 0xd5}, {0x27, 0x36, 0x2d, 0x39}, {0x64, 0xa, 0xf, 
														    0xd9}, {0x21, 0x68, 0x5c, 0xa6}, {0xd1, 0x9b, 0x5b, 0x54}, {0x3a, 0x24, 0x36, 0x2e}, {0xb1, 0xc, 
															0xa, 0x67}, {0xf, 0x93, 0x57, 0xe7}, {0xd2, 0xb4, 0xee, 0x96}, {0x9e, 0x1b, 0x9b, 0x91}, {0x4f, 
															    0x80, 0xc0, 0xc5}, {0xa2, 0x61, 0xdc, 0x20}, {0x69, 0x5a, 0x77, 0x4b}, {0x16, 0x1c, 0x12, 0x1a}, {
																0xa, 0xe2, 0x93, 0xba}, {0xe5, 0xc0, 0xa0, 0x2a}, {0x43, 0x3c, 0x22, 0xe0}, {0x1d, 0x12, 0x1b, 
																    0x17}, {0xb, 0xe, 0x9, 0xd}, {0xad, 0xf2, 0x8b, 0xc7}, {0xb9, 0x2d, 0xb6, 0xa8}, {0xc8, 0x14, 
																	0x1e, 0xa9}, {0x85, 0x57, 0xf1, 0x19}, {0x4c, 0xaf, 0x75, 0x7}, {0xbb, 0xee, 0x99, 0xdd}, {0xfd, 
																	    0xa3, 0x7f, 0x60}, {0x9f, 0xf7, 0x1, 0x26}, {0xbc, 0x5c, 0x72, 0xf5}, {0xc5, 0x44, 0x66, 0x3b}, {
																		0x34, 0x5b, 0xfb, 0x7e}, {0x76, 0x8b, 0x43, 0x29}, {0xdc, 0xcb, 0x23, 0xc6}, {0x68, 0xb6, 0xed, 
																		    0xfc}, {0x63, 0xb8, 0xe4, 0xf1}, {0xca, 0xd7, 0x31, 0xdc}, {0x10, 0x42, 0x63, 0x85}, {0x40, 0x13, 
																			0x97, 0x22}, {0x20, 0x84, 0xc6, 0x11}, {0x7d, 0x85, 0x4a, 0x24}, {0xf8, 0xd2, 0xbb, 0x3d}, {0x11, 
																			    0xae, 0xf9, 0x32}, {0x6d, 0xc7, 0x29, 0xa1}, {0x4b, 0x1d, 0x9e, 0x2f}, {0xf3, 0xdc, 0xb2, 0x30}, {
																				0xec, 0xd, 0x86, 0x52}, {0xd0, 0x77, 0xc1, 0xe3}, {0x6c, 0x2b, 0xb3, 0x16}, {0x99, 0xa9, 0x70, 
																				    0xb9}, {0xfa, 0x11, 0x94, 0x48}, {0x22, 0x47, 0xe9, 0x64}, {0xc4, 0xa8, 0xfc, 0x8c}, {0x1a, 0xa0, 
																					0xf0, 0x3f}, {0xd8, 0x56, 0x7d, 0x2c}, {0xef, 0x22, 0x33, 0x90}, {0xc7, 0x87, 0x49, 0x4e}, {0xc1, 
																					    0xd9, 0x38, 0xd1}, {0xfe, 0x8c, 0xca, 0xa2}, {0x36, 0x98, 0xd4, 0xb}, {0xcf, 0xa6, 0xf5, 0x81}, {
																						0x28, 0xa5, 0x7a, 0xde}, {0x26, 0xda, 0xb7, 0x8e}, {0xa4, 0x3f, 0xad, 0xbf}, {0xe4, 0x2c, 0x3a, 
																						    0x9d}, {0xd, 0x50, 0x78, 0x92}, {0x9b, 0x6a, 0x5f, 0xcc}, {0x62, 0x54, 0x7e, 0x46}, {0xc2, 0xf6, 
																							0x8d, 0x13}, {0xe8, 0x90, 0xd8, 0xb8}, {0x5e, 0x2e, 0x39, 0xf7}, {0xf5, 0x82, 0xc3, 0xaf}, {0xbe, 
																							    0x9f, 0x5d, 0x80}, {0x7c, 0x69, 0xd0, 0x93}, {0xa9, 0x6f, 0xd5, 0x2d}, {0xb3, 0xcf, 0x25, 0x12}, {
																								0x3b, 0xc8, 0xac, 0x99}, {0xa7, 0x10, 0x18, 0x7d}, {0x6e, 0xe8, 0x9c, 0x63}, {0x7b, 0xdb, 0x3b, 
																								    0xbb}, {0x9, 0xcd, 0x26, 0x78}, {0xf4, 0x6e, 0x59, 0x18}, {0x1, 0xec, 0x9a, 0xb7}, {0xa8, 0x83, 
																									0x4f, 0x9a}, {0x65, 0xe6, 0x95, 0x6e}, {0x7e, 0xaa, 0xff, 0xe6}, {0x8, 0x21, 0xbc, 0xcf}, {0xe6, 
																									    0xef, 0x15, 0xe8}, {0xd9, 0xba, 0xe7, 0x9b}, {0xce, 0x4a, 0x6f, 0x36}, {0xd4, 0xea, 0x9f, 0x9}, {
																										0xd6, 0x29, 0xb0, 0x7c}, {0xaf, 0x31, 0xa4, 0xb2}, {0x31, 0x2a, 0x3f, 0x23}, {0x30, 0xc6, 0xa5, 
																										    0x94}, {0xc0, 0x35, 0xa2, 0x66}, {0x37, 0x74, 0x4e, 0xbc}, {0xa6, 0xfc, 0x82, 0xca}, {0xb0, 0xe0, 
																											0x90, 0xd0}, {0x15, 0x33, 0xa7, 0xd8}, {0x4a, 0xf1, 0x4, 0x98}, {0xf7, 0x41, 0xec, 0xda}, {0xe, 
																											    0x7f, 0xcd, 0x50}, {0x2f, 0x17, 0x91, 0xf6}, {0x8d, 0x76, 0x4d, 0xd6}, {0x4d, 0x43, 0xef, 0xb0}, {
																												0x54, 0xcc, 0xaa, 0x4d}, {0xdf, 0xe4, 0x96, 0x4}, {0xe3, 0x9e, 0xd1, 0xb5}, {0x1b, 0x4c, 0x6a, 
																												    0x88}, {0xb8, 0xc1, 0x2c, 0x1f}, {0x7f, 0x46, 0x65, 0x51}, {0x4, 0x9d, 0x5e, 0xea}, {0x5d, 0x1, 
																													0x8c, 0x35}, {0x73, 0xfa, 0x87, 0x74}, {0x2e, 0xfb, 0xb, 0x41}, {0x5a, 0xb3, 0x67, 0x1d}, {0x52, 
																													    0x92, 0xdb, 0xd2}, {0x33, 0xe9, 0x10, 0x56}, {0x13, 0x6d, 0xd6, 0x47}, {0x8c, 0x9a, 0xd7, 0x61}, {
																														0x7a, 0x37, 0xa1, 0xc}, {0x8e, 0x59, 0xf8, 0x14}, {0x89, 0xeb, 0x13, 0x3c}, {0xee, 0xce, 0xa9, 
																														    0x27}, {0x35, 0xb7, 0x61, 0xc9}, {0xed, 0xe1, 0x1c, 0xe5}, {0x3c, 0x7a, 0x47, 0xb1}, {0x59, 0x9c, 
																															0xd2, 0xdf}, {0x3f, 0x55, 0xf2, 0x73}, {0x79, 0x18, 0x14, 0xce}, {0xbf, 0x73, 0xc7, 0x37}, {0xea, 
																															    0x53, 0xf7, 0xcd}, {0x5b, 0x5f, 0xfd, 0xaa}, {0x14, 0xdf, 0x3d, 0x6f}, {0x86, 0x78, 0x44, 0xdb}, {
																																0x81, 0xca, 0xaf, 0xf3}, {0x3e, 0xb9, 0x68, 0xc4}, {0x2c, 0x38, 0x24, 0x34}, {0x5f, 0xc2, 0xa3, 
																																    0x40}, {0x72, 0x16, 0x1d, 0xc3}, {0xc, 0xbc, 0xe2, 0x25}, {0x8b, 0x28, 0x3c, 0x49}, {0x41, 0xff, 
																																	0xd, 0x95}, {0x71, 0x39, 0xa8, 0x1}, {0xde, 0x8, 0xc, 0xb3}, {0x9c, 0xd8, 0xb4, 0xe4}, {0x90, 
																																	    0x64, 0x56, 0xc1}, {0x61, 0x7b, 0xcb, 0x84}, {0x70, 0xd5, 0x32, 0xb6}, {0x74, 0x48, 0x6c, 0x5c}, {
																																		0x42, 0xd0, 0xb8, 0x57}}
																																		;
static constant uchar T7[256][4]={{0xa7, 0x50, 0x51, 0xf4}, {0x65, 0x53, 0x7e, 0x41}, {0xa4, 0xc3, 0x1a, 0x17}, {0x5e, 0x96, 
    0x3a, 0x27}, {0x6b, 0xcb, 0x3b, 0xab}, {0x45, 0xf1, 0x1f, 0x9d}, {0x58, 0xab, 0xac, 0xfa}, {0x3, 
	0x93, 0x4b, 0xe3}, {0xfa, 0x55, 0x20, 0x30}, {0x6d, 0xf6, 0xad, 0x76}, {0x76, 0x91, 0x88, 0xcc}, {
	    0x4c, 0x25, 0xf5, 0x2}, {0xd7, 0xfc, 0x4f, 0xe5}, {0xcb, 0xd7, 0xc5, 0x2a}, {0x44, 0x80, 0x26, 
		0x35}, {0xa3, 0x8f, 0xb5, 0x62}, {0x5a, 0x49, 0xde, 0xb1}, {0x1b, 0x67, 0x25, 0xba}, {0xe, 0x98, 
		    0x45, 0xea}, {0xc0, 0xe1, 0x5d, 0xfe}, {0x75, 0x2, 0xc3, 0x2f}, {0xf0, 0x12, 0x81, 0x4c}, {0x97, 
			0xa3, 0x8d, 0x46}, {0xf9, 0xc6, 0x6b, 0xd3}, {0x5f, 0xe7, 0x3, 0x8f}, {0x9c, 0x95, 0x15, 0x92}, {
			    0x7a, 0xeb, 0xbf, 0x6d}, {0x59, 0xda, 0x95, 0x52}, {0x83, 0x2d, 0xd4, 0xbe}, {0x21, 0xd3, 0x58, 
				0x74}, {0x69, 0x29, 0x49, 0xe0}, {0xc8, 0x44, 0x8e, 0xc9}, {0x89, 0x6a, 0x75, 0xc2}, {0x79, 0x78, 
				    0xf4, 0x8e}, {0x3e, 0x6b, 0x99, 0x58}, {0x71, 0xdd, 0x27, 0xb9}, {0x4f, 0xb6, 0xbe, 0xe1}, {0xad, 
					0x17, 0xf0, 0x88}, {0xac, 0x66, 0xc9, 0x20}, {0x3a, 0xb4, 0x7d, 0xce}, {0x4a, 0x18, 0x63, 0xdf}, {
					    0x31, 0x82, 0xe5, 0x1a}, {0x33, 0x60, 0x97, 0x51}, {0x7f, 0x45, 0x62, 0x53}, {0x77, 0xe0, 0xb1, 
						0x64}, {0xae, 0x84, 0xbb, 0x6b}, {0xa0, 0x1c, 0xfe, 0x81}, {0x2b, 0x94, 0xf9, 0x8}, {0x68, 0x58, 
						    0x70, 0x48}, {0xfd, 0x19, 0x8f, 0x45}, {0x6c, 0x87, 0x94, 0xde}, {0xf8, 0xb7, 0x52, 0x7b}, {0xd3, 
							0x23, 0xab, 0x73}, {0x2, 0xe2, 0x72, 0x4b}, {0x8f, 0x57, 0xe3, 0x1f}, {0xab, 0x2a, 0x66, 0x55}, {
							    0x28, 0x7, 0xb2, 0xeb}, {0xc2, 0x3, 0x2f, 0xb5}, {0x7b, 0x9a, 0x86, 0xc5}, {0x8, 0xa5, 0xd3, 
								0x37}, {0x87, 0xf2, 0x30, 0x28}, {0xa5, 0xb2, 0x23, 0xbf}, {0x6a, 0xba, 0x2, 0x3}, {0x82, 0x5c, 
								    0xed, 0x16}, {0x1c, 0x2b, 0x8a, 0xcf}, {0xb4, 0x92, 0xa7, 0x79}, {0xf2, 0xf0, 0xf3, 0x7}, {0xe2, 
									0xa1, 0x4e, 0x69}, {0xf4, 0xcd, 0x65, 0xda}, {0xbe, 0xd5, 0x6, 0x5}, {0x62, 0x1f, 0xd1, 0x34}, {
									    0xfe, 0x8a, 0xc4, 0xa6}, {0x53, 0x9d, 0x34, 0x2e}, {0x55, 0xa0, 0xa2, 0xf3}, {0xe1, 0x32, 0x5, 
										0x8a}, {0xeb, 0x75, 0xa4, 0xf6}, {0xec, 0x39, 0xb, 0x83}, {0xef, 0xaa, 0x40, 0x60}, {0x9f, 0x6, 
										    0x5e, 0x71}, {0x10, 0x51, 0xbd, 0x6e}, {0x8a, 0xf9, 0x3e, 0x21}, {0x6, 0x3d, 0x96, 0xdd}, {0x5, 
											0xae, 0xdd, 0x3e}, {0xbd, 0x46, 0x4d, 0xe6}, {0x8d, 0xb5, 0x91, 0x54}, {0x5d, 0x5, 0x71, 0xc4}, {
											    0xd4, 0x6f, 0x4, 0x6}, {0x15, 0xff, 0x60, 0x50}, {0xfb, 0x24, 0x19, 0x98}, {0xe9, 0x97, 0xd6, 
												0xbd}, {0x43, 0xcc, 0x89, 0x40}, {0x9e, 0x77, 0x67, 0xd9}, {0x42, 0xbd, 0xb0, 0xe8}, {0x8b, 0x88, 
												    0x7, 0x89}, {0x5b, 0x38, 0xe7, 0x19}, {0xee, 0xdb, 0x79, 0xc8}, {0xa, 0x47, 0xa1, 0x7c}, {0xf, 
													0xe9, 0x7c, 0x42}, {0x1e, 0xc9, 0xf8, 0x84}, {0x0, 0x0, 0x0, 0x0}, {0x86, 0x83, 0x9, 0x80}, {
													    0xed, 0x48, 0x32, 0x2b}, {0x70, 0xac, 0x1e, 0x11}, {0x72, 0x4e, 0x6c, 0x5a}, {0xff, 0xfb, 0xfd, 
														0xe}, {0x38, 0x56, 0xf, 0x85}, {0xd5, 0x1e, 0x3d, 0xae}, {0x39, 0x27, 0x36, 0x2d}, {0xd9, 0x64, 
														    0xa, 0xf}, {0xa6, 0x21, 0x68, 0x5c}, {0x54, 0xd1, 0x9b, 0x5b}, {0x2e, 0x3a, 0x24, 0x36}, {0x67, 
															0xb1, 0xc, 0xa}, {0xe7, 0xf, 0x93, 0x57}, {0x96, 0xd2, 0xb4, 0xee}, {0x91, 0x9e, 0x1b, 0x9b}, {
															    0xc5, 0x4f, 0x80, 0xc0}, {0x20, 0xa2, 0x61, 0xdc}, {0x4b, 0x69, 0x5a, 0x77}, {0x1a, 0x16, 0x1c, 
																0x12}, {0xba, 0xa, 0xe2, 0x93}, {0x2a, 0xe5, 0xc0, 0xa0}, {0xe0, 0x43, 0x3c, 0x22}, {0x17, 0x1d, 
																    0x12, 0x1b}, {0xd, 0xb, 0xe, 0x9}, {0xc7, 0xad, 0xf2, 0x8b}, {0xa8, 0xb9, 0x2d, 0xb6}, {0xa9, 
																	0xc8, 0x14, 0x1e}, {0x19, 0x85, 0x57, 0xf1}, {0x7, 0x4c, 0xaf, 0x75}, {0xdd, 0xbb, 0xee, 0x99}, {
																	    0x60, 0xfd, 0xa3, 0x7f}, {0x26, 0x9f, 0xf7, 0x1}, {0xf5, 0xbc, 0x5c, 0x72}, {0x3b, 0xc5, 0x44, 
																		0x66}, {0x7e, 0x34, 0x5b, 0xfb}, {0x29, 0x76, 0x8b, 0x43}, {0xc6, 0xdc, 0xcb, 0x23}, {0xfc, 0x68, 
																		    0xb6, 0xed}, {0xf1, 0x63, 0xb8, 0xe4}, {0xdc, 0xca, 0xd7, 0x31}, {0x85, 0x10, 0x42, 0x63}, {0x22, 
																			0x40, 0x13, 0x97}, {0x11, 0x20, 0x84, 0xc6}, {0x24, 0x7d, 0x85, 0x4a}, {0x3d, 0xf8, 0xd2, 0xbb}, {
																			    0x32, 0x11, 0xae, 0xf9}, {0xa1, 0x6d, 0xc7, 0x29}, {0x2f, 0x4b, 0x1d, 0x9e}, {0x30, 0xf3, 0xdc, 
																				0xb2}, {0x52, 0xec, 0xd, 0x86}, {0xe3, 0xd0, 0x77, 0xc1}, {0x16, 0x6c, 0x2b, 0xb3}, {0xb9, 0x99, 
																				    0xa9, 0x70}, {0x48, 0xfa, 0x11, 0x94}, {0x64, 0x22, 0x47, 0xe9}, {0x8c, 0xc4, 0xa8, 0xfc}, {0x3f, 
																					0x1a, 0xa0, 0xf0}, {0x2c, 0xd8, 0x56, 0x7d}, {0x90, 0xef, 0x22, 0x33}, {0x4e, 0xc7, 0x87, 0x49}, {
																					    0xd1, 0xc1, 0xd9, 0x38}, {0xa2, 0xfe, 0x8c, 0xca}, {0xb, 0x36, 0x98, 0xd4}, {0x81, 0xcf, 0xa6, 
																						0xf5}, {0xde, 0x28, 0xa5, 0x7a}, {0x8e, 0x26, 0xda, 0xb7}, {0xbf, 0xa4, 0x3f, 0xad}, {0x9d, 0xe4, 
																						    0x2c, 0x3a}, {0x92, 0xd, 0x50, 0x78}, {0xcc, 0x9b, 0x6a, 0x5f}, {0x46, 0x62, 0x54, 0x7e}, {0x13, 
																							0xc2, 0xf6, 0x8d}, {0xb8, 0xe8, 0x90, 0xd8}, {0xf7, 0x5e, 0x2e, 0x39}, {0xaf, 0xf5, 0x82, 0xc3}, {
																							    0x80, 0xbe, 0x9f, 0x5d}, {0x93, 0x7c, 0x69, 0xd0}, {0x2d, 0xa9, 0x6f, 0xd5}, {0x12, 0xb3, 0xcf, 
																								0x25}, {0x99, 0x3b, 0xc8, 0xac}, {0x7d, 0xa7, 0x10, 0x18}, {0x63, 0x6e, 0xe8, 0x9c}, {0xbb, 0x7b, 
																								    0xdb, 0x3b}, {0x78, 0x9, 0xcd, 0x26}, {0x18, 0xf4, 0x6e, 0x59}, {0xb7, 0x1, 0xec, 0x9a}, {0x9a, 
																									0xa8, 0x83, 0x4f}, {0x6e, 0x65, 0xe6, 0x95}, {0xe6, 0x7e, 0xaa, 0xff}, {0xcf, 0x8, 0x21, 0xbc}, {
																									    0xe8, 0xe6, 0xef, 0x15}, {0x9b, 0xd9, 0xba, 0xe7}, {0x36, 0xce, 0x4a, 0x6f}, {0x9, 0xd4, 0xea, 
																										0x9f}, {0x7c, 0xd6, 0x29, 0xb0}, {0xb2, 0xaf, 0x31, 0xa4}, {0x23, 0x31, 0x2a, 0x3f}, {0x94, 0x30, 
																										    0xc6, 0xa5}, {0x66, 0xc0, 0x35, 0xa2}, {0xbc, 0x37, 0x74, 0x4e}, {0xca, 0xa6, 0xfc, 0x82}, {0xd0, 
																											0xb0, 0xe0, 0x90}, {0xd8, 0x15, 0x33, 0xa7}, {0x98, 0x4a, 0xf1, 0x4}, {0xda, 0xf7, 0x41, 0xec}, {
																											    0x50, 0xe, 0x7f, 0xcd}, {0xf6, 0x2f, 0x17, 0x91}, {0xd6, 0x8d, 0x76, 0x4d}, {0xb0, 0x4d, 0x43, 
																												0xef}, {0x4d, 0x54, 0xcc, 0xaa}, {0x4, 0xdf, 0xe4, 0x96}, {0xb5, 0xe3, 0x9e, 0xd1}, {0x88, 0x1b, 
																												    0x4c, 0x6a}, {0x1f, 0xb8, 0xc1, 0x2c}, {0x51, 0x7f, 0x46, 0x65}, {0xea, 0x4, 0x9d, 0x5e}, {0x35, 
																													0x5d, 0x1, 0x8c}, {0x74, 0x73, 0xfa, 0x87}, {0x41, 0x2e, 0xfb, 0xb}, {0x1d, 0x5a, 0xb3, 0x67}, {
																													    0xd2, 0x52, 0x92, 0xdb}, {0x56, 0x33, 0xe9, 0x10}, {0x47, 0x13, 0x6d, 0xd6}, {0x61, 0x8c, 0x9a, 
																														0xd7}, {0xc, 0x7a, 0x37, 0xa1}, {0x14, 0x8e, 0x59, 0xf8}, {0x3c, 0x89, 0xeb, 0x13}, {0x27, 0xee, 
																														    0xce, 0xa9}, {0xc9, 0x35, 0xb7, 0x61}, {0xe5, 0xed, 0xe1, 0x1c}, {0xb1, 0x3c, 0x7a, 0x47}, {0xdf, 
																															0x59, 0x9c, 0xd2}, {0x73, 0x3f, 0x55, 0xf2}, {0xce, 0x79, 0x18, 0x14}, {0x37, 0xbf, 0x73, 0xc7}, {
																															    0xcd, 0xea, 0x53, 0xf7}, {0xaa, 0x5b, 0x5f, 0xfd}, {0x6f, 0x14, 0xdf, 0x3d}, {0xdb, 0x86, 0x78, 
																																0x44}, {0xf3, 0x81, 0xca, 0xaf}, {0xc4, 0x3e, 0xb9, 0x68}, {0x34, 0x2c, 0x38, 0x24}, {0x40, 0x5f, 
																																    0xc2, 0xa3}, {0xc3, 0x72, 0x16, 0x1d}, {0x25, 0xc, 0xbc, 0xe2}, {0x49, 0x8b, 0x28, 0x3c}, {0x95, 
																																	0x41, 0xff, 0xd}, {0x1, 0x71, 0x39, 0xa8}, {0xb3, 0xde, 0x8, 0xc}, {0xe4, 0x9c, 0xd8, 0xb4}, {
																																	    0xc1, 0x90, 0x64, 0x56}, {0x84, 0x61, 0x7b, 0xcb}, {0xb6, 0x70, 0xd5, 0x32}, {0x5c, 0x74, 0x48, 
																																		0x6c}, {0x57, 0x42, 0xd0, 0xb8}}
																																		;
static constant uchar T8[256][4]={{0xf4, 0xa7, 0x50, 0x51}, {0x41, 0x65, 0x53, 0x7e}, {0x17, 0xa4, 0xc3, 0x1a}, {0x27, 0x5e, 
    0x96, 0x3a}, {0xab, 0x6b, 0xcb, 0x3b}, {0x9d, 0x45, 0xf1, 0x1f}, {0xfa, 0x58, 0xab, 0xac}, {0xe3, 
	0x3, 0x93, 0x4b}, {0x30, 0xfa, 0x55, 0x20}, {0x76, 0x6d, 0xf6, 0xad}, {0xcc, 0x76, 0x91, 0x88}, {
	    0x2, 0x4c, 0x25, 0xf5}, {0xe5, 0xd7, 0xfc, 0x4f}, {0x2a, 0xcb, 0xd7, 0xc5}, {0x35, 0x44, 0x80, 
		0x26}, {0x62, 0xa3, 0x8f, 0xb5}, {0xb1, 0x5a, 0x49, 0xde}, {0xba, 0x1b, 0x67, 0x25}, {0xea, 0xe, 
		    0x98, 0x45}, {0xfe, 0xc0, 0xe1, 0x5d}, {0x2f, 0x75, 0x2, 0xc3}, {0x4c, 0xf0, 0x12, 0x81}, {0x46, 
			0x97, 0xa3, 0x8d}, {0xd3, 0xf9, 0xc6, 0x6b}, {0x8f, 0x5f, 0xe7, 0x3}, {0x92, 0x9c, 0x95, 0x15}, {
			    0x6d, 0x7a, 0xeb, 0xbf}, {0x52, 0x59, 0xda, 0x95}, {0xbe, 0x83, 0x2d, 0xd4}, {0x74, 0x21, 0xd3, 
				0x58}, {0xe0, 0x69, 0x29, 0x49}, {0xc9, 0xc8, 0x44, 0x8e}, {0xc2, 0x89, 0x6a, 0x75}, {0x8e, 0x79, 
				    0x78, 0xf4}, {0x58, 0x3e, 0x6b, 0x99}, {0xb9, 0x71, 0xdd, 0x27}, {0xe1, 0x4f, 0xb6, 0xbe}, {0x88, 
					0xad, 0x17, 0xf0}, {0x20, 0xac, 0x66, 0xc9}, {0xce, 0x3a, 0xb4, 0x7d}, {0xdf, 0x4a, 0x18, 0x63}, {
					    0x1a, 0x31, 0x82, 0xe5}, {0x51, 0x33, 0x60, 0x97}, {0x53, 0x7f, 0x45, 0x62}, {0x64, 0x77, 0xe0, 
						0xb1}, {0x6b, 0xae, 0x84, 0xbb}, {0x81, 0xa0, 0x1c, 0xfe}, {0x8, 0x2b, 0x94, 0xf9}, {0x48, 0x68, 
						    0x58, 0x70}, {0x45, 0xfd, 0x19, 0x8f}, {0xde, 0x6c, 0x87, 0x94}, {0x7b, 0xf8, 0xb7, 0x52}, {0x73, 
							0xd3, 0x23, 0xab}, {0x4b, 0x2, 0xe2, 0x72}, {0x1f, 0x8f, 0x57, 0xe3}, {0x55, 0xab, 0x2a, 0x66}, {
							    0xeb, 0x28, 0x7, 0xb2}, {0xb5, 0xc2, 0x3, 0x2f}, {0xc5, 0x7b, 0x9a, 0x86}, {0x37, 0x8, 0xa5, 
								0xd3}, {0x28, 0x87, 0xf2, 0x30}, {0xbf, 0xa5, 0xb2, 0x23}, {0x3, 0x6a, 0xba, 0x2}, {0x16, 0x82, 
								    0x5c, 0xed}, {0xcf, 0x1c, 0x2b, 0x8a}, {0x79, 0xb4, 0x92, 0xa7}, {0x7, 0xf2, 0xf0, 0xf3}, {0x69, 
									0xe2, 0xa1, 0x4e}, {0xda, 0xf4, 0xcd, 0x65}, {0x5, 0xbe, 0xd5, 0x6}, {0x34, 0x62, 0x1f, 0xd1}, {
									    0xa6, 0xfe, 0x8a, 0xc4}, {0x2e, 0x53, 0x9d, 0x34}, {0xf3, 0x55, 0xa0, 0xa2}, {0x8a, 0xe1, 0x32, 
										0x5}, {0xf6, 0xeb, 0x75, 0xa4}, {0x83, 0xec, 0x39, 0xb}, {0x60, 0xef, 0xaa, 0x40}, {0x71, 0x9f, 
										    0x6, 0x5e}, {0x6e, 0x10, 0x51, 0xbd}, {0x21, 0x8a, 0xf9, 0x3e}, {0xdd, 0x6, 0x3d, 0x96}, {0x3e, 
											0x5, 0xae, 0xdd}, {0xe6, 0xbd, 0x46, 0x4d}, {0x54, 0x8d, 0xb5, 0x91}, {0xc4, 0x5d, 0x5, 0x71}, {
											    0x6, 0xd4, 0x6f, 0x4}, {0x50, 0x15, 0xff, 0x60}, {0x98, 0xfb, 0x24, 0x19}, {0xbd, 0xe9, 0x97, 
												0xd6}, {0x40, 0x43, 0xcc, 0x89}, {0xd9, 0x9e, 0x77, 0x67}, {0xe8, 0x42, 0xbd, 0xb0}, {0x89, 0x8b, 
												    0x88, 0x7}, {0x19, 0x5b, 0x38, 0xe7}, {0xc8, 0xee, 0xdb, 0x79}, {0x7c, 0xa, 0x47, 0xa1}, {0x42, 
													0xf, 0xe9, 0x7c}, {0x84, 0x1e, 0xc9, 0xf8}, {0x0, 0x0, 0x0, 0x0}, {0x80, 0x86, 0x83, 0x9}, {0x2b, 
													    0xed, 0x48, 0x32}, {0x11, 0x70, 0xac, 0x1e}, {0x5a, 0x72, 0x4e, 0x6c}, {0xe, 0xff, 0xfb, 0xfd}, {
														0x85, 0x38, 0x56, 0xf}, {0xae, 0xd5, 0x1e, 0x3d}, {0x2d, 0x39, 0x27, 0x36}, {0xf, 0xd9, 0x64, 
														    0xa}, {0x5c, 0xa6, 0x21, 0x68}, {0x5b, 0x54, 0xd1, 0x9b}, {0x36, 0x2e, 0x3a, 0x24}, {0xa, 0x67, 
															0xb1, 0xc}, {0x57, 0xe7, 0xf, 0x93}, {0xee, 0x96, 0xd2, 0xb4}, {0x9b, 0x91, 0x9e, 0x1b}, {0xc0, 
															    0xc5, 0x4f, 0x80}, {0xdc, 0x20, 0xa2, 0x61}, {0x77, 0x4b, 0x69, 0x5a}, {0x12, 0x1a, 0x16, 0x1c}, {
																0x93, 0xba, 0xa, 0xe2}, {0xa0, 0x2a, 0xe5, 0xc0}, {0x22, 0xe0, 0x43, 0x3c}, {0x1b, 0x17, 0x1d, 
																    0x12}, {0x9, 0xd, 0xb, 0xe}, {0x8b, 0xc7, 0xad, 0xf2}, {0xb6, 0xa8, 0xb9, 0x2d}, {0x1e, 0xa9, 
																	0xc8, 0x14}, {0xf1, 0x19, 0x85, 0x57}, {0x75, 0x7, 0x4c, 0xaf}, {0x99, 0xdd, 0xbb, 0xee}, {0x7f, 
																	    0x60, 0xfd, 0xa3}, {0x1, 0x26, 0x9f, 0xf7}, {0x72, 0xf5, 0xbc, 0x5c}, {0x66, 0x3b, 0xc5, 0x44}, {
																		0xfb, 0x7e, 0x34, 0x5b}, {0x43, 0x29, 0x76, 0x8b}, {0x23, 0xc6, 0xdc, 0xcb}, {0xed, 0xfc, 0x68, 
																		    0xb6}, {0xe4, 0xf1, 0x63, 0xb8}, {0x31, 0xdc, 0xca, 0xd7}, {0x63, 0x85, 0x10, 0x42}, {0x97, 0x22, 
																			0x40, 0x13}, {0xc6, 0x11, 0x20, 0x84}, {0x4a, 0x24, 0x7d, 0x85}, {0xbb, 0x3d, 0xf8, 0xd2}, {0xf9, 
																			    0x32, 0x11, 0xae}, {0x29, 0xa1, 0x6d, 0xc7}, {0x9e, 0x2f, 0x4b, 0x1d}, {0xb2, 0x30, 0xf3, 0xdc}, {
																				0x86, 0x52, 0xec, 0xd}, {0xc1, 0xe3, 0xd0, 0x77}, {0xb3, 0x16, 0x6c, 0x2b}, {0x70, 0xb9, 0x99, 
																				    0xa9}, {0x94, 0x48, 0xfa, 0x11}, {0xe9, 0x64, 0x22, 0x47}, {0xfc, 0x8c, 0xc4, 0xa8}, {0xf0, 0x3f, 
																					0x1a, 0xa0}, {0x7d, 0x2c, 0xd8, 0x56}, {0x33, 0x90, 0xef, 0x22}, {0x49, 0x4e, 0xc7, 0x87}, {0x38, 
																					    0xd1, 0xc1, 0xd9}, {0xca, 0xa2, 0xfe, 0x8c}, {0xd4, 0xb, 0x36, 0x98}, {0xf5, 0x81, 0xcf, 0xa6}, {
																						0x7a, 0xde, 0x28, 0xa5}, {0xb7, 0x8e, 0x26, 0xda}, {0xad, 0xbf, 0xa4, 0x3f}, {0x3a, 0x9d, 0xe4, 
																						    0x2c}, {0x78, 0x92, 0xd, 0x50}, {0x5f, 0xcc, 0x9b, 0x6a}, {0x7e, 0x46, 0x62, 0x54}, {0x8d, 0x13, 
																							0xc2, 0xf6}, {0xd8, 0xb8, 0xe8, 0x90}, {0x39, 0xf7, 0x5e, 0x2e}, {0xc3, 0xaf, 0xf5, 0x82}, {0x5d, 
																							    0x80, 0xbe, 0x9f}, {0xd0, 0x93, 0x7c, 0x69}, {0xd5, 0x2d, 0xa9, 0x6f}, {0x25, 0x12, 0xb3, 0xcf}, {
																								0xac, 0x99, 0x3b, 0xc8}, {0x18, 0x7d, 0xa7, 0x10}, {0x9c, 0x63, 0x6e, 0xe8}, {0x3b, 0xbb, 0x7b, 
																								    0xdb}, {0x26, 0x78, 0x9, 0xcd}, {0x59, 0x18, 0xf4, 0x6e}, {0x9a, 0xb7, 0x1, 0xec}, {0x4f, 0x9a, 
																									0xa8, 0x83}, {0x95, 0x6e, 0x65, 0xe6}, {0xff, 0xe6, 0x7e, 0xaa}, {0xbc, 0xcf, 0x8, 0x21}, {0x15, 
																									    0xe8, 0xe6, 0xef}, {0xe7, 0x9b, 0xd9, 0xba}, {0x6f, 0x36, 0xce, 0x4a}, {0x9f, 0x9, 0xd4, 0xea}, {
																										0xb0, 0x7c, 0xd6, 0x29}, {0xa4, 0xb2, 0xaf, 0x31}, {0x3f, 0x23, 0x31, 0x2a}, {0xa5, 0x94, 0x30, 
																										    0xc6}, {0xa2, 0x66, 0xc0, 0x35}, {0x4e, 0xbc, 0x37, 0x74}, {0x82, 0xca, 0xa6, 0xfc}, {0x90, 0xd0, 
																											0xb0, 0xe0}, {0xa7, 0xd8, 0x15, 0x33}, {0x4, 0x98, 0x4a, 0xf1}, {0xec, 0xda, 0xf7, 0x41}, {0xcd, 
																											    0x50, 0xe, 0x7f}, {0x91, 0xf6, 0x2f, 0x17}, {0x4d, 0xd6, 0x8d, 0x76}, {0xef, 0xb0, 0x4d, 0x43}, {
																												0xaa, 0x4d, 0x54, 0xcc}, {0x96, 0x4, 0xdf, 0xe4}, {0xd1, 0xb5, 0xe3, 0x9e}, {0x6a, 0x88, 0x1b, 
																												    0x4c}, {0x2c, 0x1f, 0xb8, 0xc1}, {0x65, 0x51, 0x7f, 0x46}, {0x5e, 0xea, 0x4, 0x9d}, {0x8c, 0x35, 
																													0x5d, 0x1}, {0x87, 0x74, 0x73, 0xfa}, {0xb, 0x41, 0x2e, 0xfb}, {0x67, 0x1d, 0x5a, 0xb3}, {0xdb, 
																													    0xd2, 0x52, 0x92}, {0x10, 0x56, 0x33, 0xe9}, {0xd6, 0x47, 0x13, 0x6d}, {0xd7, 0x61, 0x8c, 0x9a}, {
																														0xa1, 0xc, 0x7a, 0x37}, {0xf8, 0x14, 0x8e, 0x59}, {0x13, 0x3c, 0x89, 0xeb}, {0xa9, 0x27, 0xee, 
																														    0xce}, {0x61, 0xc9, 0x35, 0xb7}, {0x1c, 0xe5, 0xed, 0xe1}, {0x47, 0xb1, 0x3c, 0x7a}, {0xd2, 0xdf, 
																															0x59, 0x9c}, {0xf2, 0x73, 0x3f, 0x55}, {0x14, 0xce, 0x79, 0x18}, {0xc7, 0x37, 0xbf, 0x73}, {0xf7, 
																															    0xcd, 0xea, 0x53}, {0xfd, 0xaa, 0x5b, 0x5f}, {0x3d, 0x6f, 0x14, 0xdf}, {0x44, 0xdb, 0x86, 0x78}, {
																																0xaf, 0xf3, 0x81, 0xca}, {0x68, 0xc4, 0x3e, 0xb9}, {0x24, 0x34, 0x2c, 0x38}, {0xa3, 0x40, 0x5f, 
																																    0xc2}, {0x1d, 0xc3, 0x72, 0x16}, {0xe2, 0x25, 0xc, 0xbc}, {0x3c, 0x49, 0x8b, 0x28}, {0xd, 0x95, 
																																	0x41, 0xff}, {0xa8, 0x1, 0x71, 0x39}, {0xc, 0xb3, 0xde, 0x8}, {0xb4, 0xe4, 0x9c, 0xd8}, {0x56, 
																																	    0xc1, 0x90, 0x64}, {0xcb, 0x84, 0x61, 0x7b}, {0x32, 0xb6, 0x70, 0xd5}, {0x6c, 0x5c, 0x74, 0x48}, {
																																		0xb8, 0x57, 0x42, 0xd0}};
static constant uchar U1[256][4]= {{0x0, 0x0, 0x0, 0x0}, {0xe, 0x9, 0xd, 0xb}, {0x1c, 0x12, 0x1a, 0x16}, {0x12, 0x1b, 0x17, 
    0x1d}, {0x38, 0x24, 0x34, 0x2c}, {0x36, 0x2d, 0x39, 0x27}, {0x24, 0x36, 0x2e, 0x3a}, {0x2a, 0x3f, 
	0x23, 0x31}, {0x70, 0x48, 0x68, 0x58}, {0x7e, 0x41, 0x65, 0x53}, {0x6c, 0x5a, 0x72, 0x4e}, {0x62, 
	    0x53, 0x7f, 0x45}, {0x48, 0x6c, 0x5c, 0x74}, {0x46, 0x65, 0x51, 0x7f}, {0x54, 0x7e, 0x46, 0x62}, {
		0x5a, 0x77, 0x4b, 0x69}, {0xe0, 0x90, 0xd0, 0xb0}, {0xee, 0x99, 0xdd, 0xbb}, {0xfc, 0x82, 0xca, 
		    0xa6}, {0xf2, 0x8b, 0xc7, 0xad}, {0xd8, 0xb4, 0xe4, 0x9c}, {0xd6, 0xbd, 0xe9, 0x97}, {0xc4, 0xa6, 
			0xfe, 0x8a}, {0xca, 0xaf, 0xf3, 0x81}, {0x90, 0xd8, 0xb8, 0xe8}, {0x9e, 0xd1, 0xb5, 0xe3}, {0x8c, 
			    0xca, 0xa2, 0xfe}, {0x82, 0xc3, 0xaf, 0xf5}, {0xa8, 0xfc, 0x8c, 0xc4}, {0xa6, 0xf5, 0x81, 0xcf}, {
				0xb4, 0xee, 0x96, 0xd2}, {0xba, 0xe7, 0x9b, 0xd9}, {0xdb, 0x3b, 0xbb, 0x7b}, {0xd5, 0x32, 0xb6, 
				    0x70}, {0xc7, 0x29, 0xa1, 0x6d}, {0xc9, 0x20, 0xac, 0x66}, {0xe3, 0x1f, 0x8f, 0x57}, {0xed, 0x16, 
					0x82, 0x5c}, {0xff, 0xd, 0x95, 0x41}, {0xf1, 0x4, 0x98, 0x4a}, {0xab, 0x73, 0xd3, 0x23}, {0xa5, 
					    0x7a, 0xde, 0x28}, {0xb7, 0x61, 0xc9, 0x35}, {0xb9, 0x68, 0xc4, 0x3e}, {0x93, 0x57, 0xe7, 0xf}, {
						0x9d, 0x5e, 0xea, 0x4}, {0x8f, 0x45, 0xfd, 0x19}, {0x81, 0x4c, 0xf0, 0x12}, {0x3b, 0xab, 0x6b, 
						    0xcb}, {0x35, 0xa2, 0x66, 0xc0}, {0x27, 0xb9, 0x71, 0xdd}, {0x29, 0xb0, 0x7c, 0xd6}, {0x3, 0x8f, 
							0x5f, 0xe7}, {0xd, 0x86, 0x52, 0xec}, {0x1f, 0x9d, 0x45, 0xf1}, {0x11, 0x94, 0x48, 0xfa}, {0x4b, 
							    0xe3, 0x3, 0x93}, {0x45, 0xea, 0xe, 0x98}, {0x57, 0xf1, 0x19, 0x85}, {0x59, 0xf8, 0x14, 0x8e}, {
								0x73, 0xc7, 0x37, 0xbf}, {0x7d, 0xce, 0x3a, 0xb4}, {0x6f, 0xd5, 0x2d, 0xa9}, {0x61, 0xdc, 0x20, 
								    0xa2}, {0xad, 0x76, 0x6d, 0xf6}, {0xa3, 0x7f, 0x60, 0xfd}, {0xb1, 0x64, 0x77, 0xe0}, {0xbf, 0x6d, 
									0x7a, 0xeb}, {0x95, 0x52, 0x59, 0xda}, {0x9b, 0x5b, 0x54, 0xd1}, {0x89, 0x40, 0x43, 0xcc}, {0x87, 
									    0x49, 0x4e, 0xc7}, {0xdd, 0x3e, 0x5, 0xae}, {0xd3, 0x37, 0x8, 0xa5}, {0xc1, 0x2c, 0x1f, 0xb8}, {
										0xcf, 0x25, 0x12, 0xb3}, {0xe5, 0x1a, 0x31, 0x82}, {0xeb, 0x13, 0x3c, 0x89}, {0xf9, 0x8, 0x2b, 
										    0x94}, {0xf7, 0x1, 0x26, 0x9f}, {0x4d, 0xe6, 0xbd, 0x46}, {0x43, 0xef, 0xb0, 0x4d}, {0x51, 0xf4, 
											0xa7, 0x50}, {0x5f, 0xfd, 0xaa, 0x5b}, {0x75, 0xc2, 0x89, 0x6a}, {0x7b, 0xcb, 0x84, 0x61}, {0x69, 
											    0xd0, 0x93, 0x7c}, {0x67, 0xd9, 0x9e, 0x77}, {0x3d, 0xae, 0xd5, 0x1e}, {0x33, 0xa7, 0xd8, 0x15}, {
												0x21, 0xbc, 0xcf, 0x8}, {0x2f, 0xb5, 0xc2, 0x3}, {0x5, 0x8a, 0xe1, 0x32}, {0xb, 0x83, 0xec, 
												    0x39}, {0x19, 0x98, 0xfb, 0x24}, {0x17, 0x91, 0xf6, 0x2f}, {0x76, 0x4d, 0xd6, 0x8d}, {0x78, 0x44, 
													0xdb, 0x86}, {0x6a, 0x5f, 0xcc, 0x9b}, {0x64, 0x56, 0xc1, 0x90}, {0x4e, 0x69, 0xe2, 0xa1}, {0x40, 
													    0x60, 0xef, 0xaa}, {0x52, 0x7b, 0xf8, 0xb7}, {0x5c, 0x72, 0xf5, 0xbc}, {0x6, 0x5, 0xbe, 0xd5}, {
														0x8, 0xc, 0xb3, 0xde}, {0x1a, 0x17, 0xa4, 0xc3}, {0x14, 0x1e, 0xa9, 0xc8}, {0x3e, 0x21, 0x8a, 
														    0xf9}, {0x30, 0x28, 0x87, 0xf2}, {0x22, 0x33, 0x90, 0xef}, {0x2c, 0x3a, 0x9d, 0xe4}, {0x96, 0xdd, 
															0x6, 0x3d}, {0x98, 0xd4, 0xb, 0x36}, {0x8a, 0xcf, 0x1c, 0x2b}, {0x84, 0xc6, 0x11, 0x20}, {0xae, 
															    0xf9, 0x32, 0x11}, {0xa0, 0xf0, 0x3f, 0x1a}, {0xb2, 0xeb, 0x28, 0x7}, {0xbc, 0xe2, 0x25, 0xc}, {
																0xe6, 0x95, 0x6e, 0x65}, {0xe8, 0x9c, 0x63, 0x6e}, {0xfa, 0x87, 0x74, 0x73}, {0xf4, 0x8e, 0x79, 
																    0x78}, {0xde, 0xb1, 0x5a, 0x49}, {0xd0, 0xb8, 0x57, 0x42}, {0xc2, 0xa3, 0x40, 0x5f}, {0xcc, 0xaa, 
																	0x4d, 0x54}, {0x41, 0xec, 0xda, 0xf7}, {0x4f, 0xe5, 0xd7, 0xfc}, {0x5d, 0xfe, 0xc0, 0xe1}, {0x53, 
																	    0xf7, 0xcd, 0xea}, {0x79, 0xc8, 0xee, 0xdb}, {0x77, 0xc1, 0xe3, 0xd0}, {0x65, 0xda, 0xf4, 0xcd}, {
																		0x6b, 0xd3, 0xf9, 0xc6}, {0x31, 0xa4, 0xb2, 0xaf}, {0x3f, 0xad, 0xbf, 0xa4}, {0x2d, 0xb6, 0xa8, 
																		    0xb9}, {0x23, 0xbf, 0xa5, 0xb2}, {0x9, 0x80, 0x86, 0x83}, {0x7, 0x89, 0x8b, 0x88}, {0x15, 0x92, 
																			0x9c, 0x95}, {0x1b, 0x9b, 0x91, 0x9e}, {0xa1, 0x7c, 0xa, 0x47}, {0xaf, 0x75, 0x7, 0x4c}, {0xbd, 
																			    0x6e, 0x10, 0x51}, {0xb3, 0x67, 0x1d, 0x5a}, {0x99, 0x58, 0x3e, 0x6b}, {0x97, 0x51, 0x33, 0x60}, {
																				0x85, 0x4a, 0x24, 0x7d}, {0x8b, 0x43, 0x29, 0x76}, {0xd1, 0x34, 0x62, 0x1f}, {0xdf, 0x3d, 0x6f, 
																				    0x14}, {0xcd, 0x26, 0x78, 0x9}, {0xc3, 0x2f, 0x75, 0x2}, {0xe9, 0x10, 0x56, 0x33}, {0xe7, 0x19, 
																					0x5b, 0x38}, {0xf5, 0x2, 0x4c, 0x25}, {0xfb, 0xb, 0x41, 0x2e}, {0x9a, 0xd7, 0x61, 0x8c}, {0x94, 
																					    0xde, 0x6c, 0x87}, {0x86, 0xc5, 0x7b, 0x9a}, {0x88, 0xcc, 0x76, 0x91}, {0xa2, 0xf3, 0x55, 0xa0}, {
																						0xac, 0xfa, 0x58, 0xab}, {0xbe, 0xe1, 0x4f, 0xb6}, {0xb0, 0xe8, 0x42, 0xbd}, {0xea, 0x9f, 0x9, 
																						    0xd4}, {0xe4, 0x96, 0x4, 0xdf}, {0xf6, 0x8d, 0x13, 0xc2}, {0xf8, 0x84, 0x1e, 0xc9}, {0xd2, 0xbb, 
																							0x3d, 0xf8}, {0xdc, 0xb2, 0x30, 0xf3}, {0xce, 0xa9, 0x27, 0xee}, {0xc0, 0xa0, 0x2a, 0xe5}, {0x7a, 
																							    0x47, 0xb1, 0x3c}, {0x74, 0x4e, 0xbc, 0x37}, {0x66, 0x55, 0xab, 0x2a}, {0x68, 0x5c, 0xa6, 0x21}, {
																								0x42, 0x63, 0x85, 0x10}, {0x4c, 0x6a, 0x88, 0x1b}, {0x5e, 0x71, 0x9f, 0x6}, {0x50, 0x78, 0x92, 
																								    0xd}, {0xa, 0xf, 0xd9, 0x64}, {0x4, 0x6, 0xd4, 0x6f}, {0x16, 0x1d, 0xc3, 0x72}, {0x18, 0x14, 
																									0xce, 0x79}, {0x32, 0x2b, 0xed, 0x48}, {0x3c, 0x22, 0xe0, 0x43}, {0x2e, 0x39, 0xf7, 0x5e}, {0x20, 
																									    0x30, 0xfa, 0x55}, {0xec, 0x9a, 0xb7, 0x1}, {0xe2, 0x93, 0xba, 0xa}, {0xf0, 0x88, 0xad, 0x17}, {
																										0xfe, 0x81, 0xa0, 0x1c}, {0xd4, 0xbe, 0x83, 0x2d}, {0xda, 0xb7, 0x8e, 0x26}, {0xc8, 0xac, 0x99, 
																										    0x3b}, {0xc6, 0xa5, 0x94, 0x30}, {0x9c, 0xd2, 0xdf, 0x59}, {0x92, 0xdb, 0xd2, 0x52}, {0x80, 0xc0, 
																											0xc5, 0x4f}, {0x8e, 0xc9, 0xc8, 0x44}, {0xa4, 0xf6, 0xeb, 0x75}, {0xaa, 0xff, 0xe6, 0x7e}, {0xb8, 
																											    0xe4, 0xf1, 0x63}, {0xb6, 0xed, 0xfc, 0x68}, {0xc, 0xa, 0x67, 0xb1}, {0x2, 0x3, 0x6a, 0xba}, {
																												0x10, 0x18, 0x7d, 0xa7}, {0x1e, 0x11, 0x70, 0xac}, {0x34, 0x2e, 0x53, 0x9d}, {0x3a, 0x27, 0x5e, 
																												    0x96}, {0x28, 0x3c, 0x49, 0x8b}, {0x26, 0x35, 0x44, 0x80}, {0x7c, 0x42, 0xf, 0xe9}, {0x72, 0x4b, 
																													0x2, 0xe2}, {0x60, 0x50, 0x15, 0xff}, {0x6e, 0x59, 0x18, 0xf4}, {0x44, 0x66, 0x3b, 0xc5}, {0x4a, 
																													    0x6f, 0x36, 0xce}, {0x58, 0x74, 0x21, 0xd3}, {0x56, 0x7d, 0x2c, 0xd8}, {0x37, 0xa1, 0xc, 0x7a}, {
																														0x39, 0xa8, 0x1, 0x71}, {0x2b, 0xb3, 0x16, 0x6c}, {0x25, 0xba, 0x1b, 0x67}, {0xf, 0x85, 0x38, 
																														    0x56}, {0x1, 0x8c, 0x35, 0x5d}, {0x13, 0x97, 0x22, 0x40}, {0x1d, 0x9e, 0x2f, 0x4b}, {0x47, 0xe9, 
																															0x64, 0x22}, {0x49, 0xe0, 0x69, 0x29}, {0x5b, 0xfb, 0x7e, 0x34}, {0x55, 0xf2, 0x73, 0x3f}, {0x7f, 
																															    0xcd, 0x50, 0xe}, {0x71, 0xc4, 0x5d, 0x5}, {0x63, 0xdf, 0x4a, 0x18}, {0x6d, 0xd6, 0x47, 0x13}, {
																																0xd7, 0x31, 0xdc, 0xca}, {0xd9, 0x38, 0xd1, 0xc1}, {0xcb, 0x23, 0xc6, 0xdc}, {0xc5, 0x2a, 0xcb, 
																																    0xd7}, {0xef, 0x15, 0xe8, 0xe6}, {0xe1, 0x1c, 0xe5, 0xed}, {0xf3, 0x7, 0xf2, 0xf0}, {0xfd, 0xe, 
																																	0xff, 0xfb}, {0xa7, 0x79, 0xb4, 0x92}, {0xa9, 0x70, 0xb9, 0x99}, {0xbb, 0x6b, 0xae, 0x84}, {0xb5, 
																																	    0x62, 0xa3, 0x8f}, {0x9f, 0x5d, 0x80, 0xbe}, {0x91, 0x54, 0x8d, 0xb5}, {0x83, 0x4f, 0x9a, 0xa8}, {
																																		0x8d, 0x46, 0x97, 0xa3}};
static constant uchar U2[256][4]={{0x0, 0x0, 0x0, 0x0}, {0xb, 0xe, 0x9, 0xd}, {0x16, 0x1c, 0x12, 0x1a}, {0x1d, 0x12, 0x1b, 
    0x17}, {0x2c, 0x38, 0x24, 0x34}, {0x27, 0x36, 0x2d, 0x39}, {0x3a, 0x24, 0x36, 0x2e}, {0x31, 0x2a, 
	0x3f, 0x23}, {0x58, 0x70, 0x48, 0x68}, {0x53, 0x7e, 0x41, 0x65}, {0x4e, 0x6c, 0x5a, 0x72}, {0x45, 
	    0x62, 0x53, 0x7f}, {0x74, 0x48, 0x6c, 0x5c}, {0x7f, 0x46, 0x65, 0x51}, {0x62, 0x54, 0x7e, 0x46}, {
		0x69, 0x5a, 0x77, 0x4b}, {0xb0, 0xe0, 0x90, 0xd0}, {0xbb, 0xee, 0x99, 0xdd}, {0xa6, 0xfc, 0x82, 
		    0xca}, {0xad, 0xf2, 0x8b, 0xc7}, {0x9c, 0xd8, 0xb4, 0xe4}, {0x97, 0xd6, 0xbd, 0xe9}, {0x8a, 0xc4, 
			0xa6, 0xfe}, {0x81, 0xca, 0xaf, 0xf3}, {0xe8, 0x90, 0xd8, 0xb8}, {0xe3, 0x9e, 0xd1, 0xb5}, {0xfe, 
			    0x8c, 0xca, 0xa2}, {0xf5, 0x82, 0xc3, 0xaf}, {0xc4, 0xa8, 0xfc, 0x8c}, {0xcf, 0xa6, 0xf5, 0x81}, {
				0xd2, 0xb4, 0xee, 0x96}, {0xd9, 0xba, 0xe7, 0x9b}, {0x7b, 0xdb, 0x3b, 0xbb}, {0x70, 0xd5, 0x32, 
				    0xb6}, {0x6d, 0xc7, 0x29, 0xa1}, {0x66, 0xc9, 0x20, 0xac}, {0x57, 0xe3, 0x1f, 0x8f}, {0x5c, 0xed, 
					0x16, 0x82}, {0x41, 0xff, 0xd, 0x95}, {0x4a, 0xf1, 0x4, 0x98}, {0x23, 0xab, 0x73, 0xd3}, {0x28, 
					    0xa5, 0x7a, 0xde}, {0x35, 0xb7, 0x61, 0xc9}, {0x3e, 0xb9, 0x68, 0xc4}, {0xf, 0x93, 0x57, 0xe7}, {
						0x4, 0x9d, 0x5e, 0xea}, {0x19, 0x8f, 0x45, 0xfd}, {0x12, 0x81, 0x4c, 0xf0}, {0xcb, 0x3b, 0xab, 
						    0x6b}, {0xc0, 0x35, 0xa2, 0x66}, {0xdd, 0x27, 0xb9, 0x71}, {0xd6, 0x29, 0xb0, 0x7c}, {0xe7, 0x3, 
							0x8f, 0x5f}, {0xec, 0xd, 0x86, 0x52}, {0xf1, 0x1f, 0x9d, 0x45}, {0xfa, 0x11, 0x94, 0x48}, {0x93, 
							    0x4b, 0xe3, 0x3}, {0x98, 0x45, 0xea, 0xe}, {0x85, 0x57, 0xf1, 0x19}, {0x8e, 0x59, 0xf8, 0x14}, {
								0xbf, 0x73, 0xc7, 0x37}, {0xb4, 0x7d, 0xce, 0x3a}, {0xa9, 0x6f, 0xd5, 0x2d}, {0xa2, 0x61, 0xdc, 
								    0x20}, {0xf6, 0xad, 0x76, 0x6d}, {0xfd, 0xa3, 0x7f, 0x60}, {0xe0, 0xb1, 0x64, 0x77}, {0xeb, 0xbf, 
									0x6d, 0x7a}, {0xda, 0x95, 0x52, 0x59}, {0xd1, 0x9b, 0x5b, 0x54}, {0xcc, 0x89, 0x40, 0x43}, {0xc7, 
									    0x87, 0x49, 0x4e}, {0xae, 0xdd, 0x3e, 0x5}, {0xa5, 0xd3, 0x37, 0x8}, {0xb8, 0xc1, 0x2c, 0x1f}, {
										0xb3, 0xcf, 0x25, 0x12}, {0x82, 0xe5, 0x1a, 0x31}, {0x89, 0xeb, 0x13, 0x3c}, {0x94, 0xf9, 0x8, 
										    0x2b}, {0x9f, 0xf7, 0x1, 0x26}, {0x46, 0x4d, 0xe6, 0xbd}, {0x4d, 0x43, 0xef, 0xb0}, {0x50, 0x51, 
											0xf4, 0xa7}, {0x5b, 0x5f, 0xfd, 0xaa}, {0x6a, 0x75, 0xc2, 0x89}, {0x61, 0x7b, 0xcb, 0x84}, {0x7c, 
											    0x69, 0xd0, 0x93}, {0x77, 0x67, 0xd9, 0x9e}, {0x1e, 0x3d, 0xae, 0xd5}, {0x15, 0x33, 0xa7, 0xd8}, {
												0x8, 0x21, 0xbc, 0xcf}, {0x3, 0x2f, 0xb5, 0xc2}, {0x32, 0x5, 0x8a, 0xe1}, {0x39, 0xb, 0x83, 
												    0xec}, {0x24, 0x19, 0x98, 0xfb}, {0x2f, 0x17, 0x91, 0xf6}, {0x8d, 0x76, 0x4d, 0xd6}, {0x86, 0x78, 
													0x44, 0xdb}, {0x9b, 0x6a, 0x5f, 0xcc}, {0x90, 0x64, 0x56, 0xc1}, {0xa1, 0x4e, 0x69, 0xe2}, {0xaa, 
													    0x40, 0x60, 0xef}, {0xb7, 0x52, 0x7b, 0xf8}, {0xbc, 0x5c, 0x72, 0xf5}, {0xd5, 0x6, 0x5, 0xbe}, {
														0xde, 0x8, 0xc, 0xb3}, {0xc3, 0x1a, 0x17, 0xa4}, {0xc8, 0x14, 0x1e, 0xa9}, {0xf9, 0x3e, 0x21, 
														    0x8a}, {0xf2, 0x30, 0x28, 0x87}, {0xef, 0x22, 0x33, 0x90}, {0xe4, 0x2c, 0x3a, 0x9d}, {0x3d, 0x96, 
															0xdd, 0x6}, {0x36, 0x98, 0xd4, 0xb}, {0x2b, 0x8a, 0xcf, 0x1c}, {0x20, 0x84, 0xc6, 0x11}, {0x11, 
															    0xae, 0xf9, 0x32}, {0x1a, 0xa0, 0xf0, 0x3f}, {0x7, 0xb2, 0xeb, 0x28}, {0xc, 0xbc, 0xe2, 0x25}, {
																0x65, 0xe6, 0x95, 0x6e}, {0x6e, 0xe8, 0x9c, 0x63}, {0x73, 0xfa, 0x87, 0x74}, {0x78, 0xf4, 0x8e, 
																    0x79}, {0x49, 0xde, 0xb1, 0x5a}, {0x42, 0xd0, 0xb8, 0x57}, {0x5f, 0xc2, 0xa3, 0x40}, {0x54, 0xcc, 
																	0xaa, 0x4d}, {0xf7, 0x41, 0xec, 0xda}, {0xfc, 0x4f, 0xe5, 0xd7}, {0xe1, 0x5d, 0xfe, 0xc0}, {0xea, 
																	    0x53, 0xf7, 0xcd}, {0xdb, 0x79, 0xc8, 0xee}, {0xd0, 0x77, 0xc1, 0xe3}, {0xcd, 0x65, 0xda, 0xf4}, {
																		0xc6, 0x6b, 0xd3, 0xf9}, {0xaf, 0x31, 0xa4, 0xb2}, {0xa4, 0x3f, 0xad, 0xbf}, {0xb9, 0x2d, 0xb6, 
																		    0xa8}, {0xb2, 0x23, 0xbf, 0xa5}, {0x83, 0x9, 0x80, 0x86}, {0x88, 0x7, 0x89, 0x8b}, {0x95, 0x15, 
																			0x92, 0x9c}, {0x9e, 0x1b, 0x9b, 0x91}, {0x47, 0xa1, 0x7c, 0xa}, {0x4c, 0xaf, 0x75, 0x7}, {0x51, 
																			    0xbd, 0x6e, 0x10}, {0x5a, 0xb3, 0x67, 0x1d}, {0x6b, 0x99, 0x58, 0x3e}, {0x60, 0x97, 0x51, 0x33}, {
																				0x7d, 0x85, 0x4a, 0x24}, {0x76, 0x8b, 0x43, 0x29}, {0x1f, 0xd1, 0x34, 0x62}, {0x14, 0xdf, 0x3d, 
																				    0x6f}, {0x9, 0xcd, 0x26, 0x78}, {0x2, 0xc3, 0x2f, 0x75}, {0x33, 0xe9, 0x10, 0x56}, {0x38, 0xe7, 
																					0x19, 0x5b}, {0x25, 0xf5, 0x2, 0x4c}, {0x2e, 0xfb, 0xb, 0x41}, {0x8c, 0x9a, 0xd7, 0x61}, {0x87, 
																					    0x94, 0xde, 0x6c}, {0x9a, 0x86, 0xc5, 0x7b}, {0x91, 0x88, 0xcc, 0x76}, {0xa0, 0xa2, 0xf3, 0x55}, {
																						0xab, 0xac, 0xfa, 0x58}, {0xb6, 0xbe, 0xe1, 0x4f}, {0xbd, 0xb0, 0xe8, 0x42}, {0xd4, 0xea, 0x9f, 
																						    0x9}, {0xdf, 0xe4, 0x96, 0x4}, {0xc2, 0xf6, 0x8d, 0x13}, {0xc9, 0xf8, 0x84, 0x1e}, {0xf8, 0xd2, 
																							0xbb, 0x3d}, {0xf3, 0xdc, 0xb2, 0x30}, {0xee, 0xce, 0xa9, 0x27}, {0xe5, 0xc0, 0xa0, 0x2a}, {0x3c, 
																							    0x7a, 0x47, 0xb1}, {0x37, 0x74, 0x4e, 0xbc}, {0x2a, 0x66, 0x55, 0xab}, {0x21, 0x68, 0x5c, 0xa6}, {
																								0x10, 0x42, 0x63, 0x85}, {0x1b, 0x4c, 0x6a, 0x88}, {0x6, 0x5e, 0x71, 0x9f}, {0xd, 0x50, 0x78, 
																								    0x92}, {0x64, 0xa, 0xf, 0xd9}, {0x6f, 0x4, 0x6, 0xd4}, {0x72, 0x16, 0x1d, 0xc3}, {0x79, 0x18, 
																									0x14, 0xce}, {0x48, 0x32, 0x2b, 0xed}, {0x43, 0x3c, 0x22, 0xe0}, {0x5e, 0x2e, 0x39, 0xf7}, {0x55, 
																									    0x20, 0x30, 0xfa}, {0x1, 0xec, 0x9a, 0xb7}, {0xa, 0xe2, 0x93, 0xba}, {0x17, 0xf0, 0x88, 0xad}, {
																										0x1c, 0xfe, 0x81, 0xa0}, {0x2d, 0xd4, 0xbe, 0x83}, {0x26, 0xda, 0xb7, 0x8e}, {0x3b, 0xc8, 0xac, 
																										    0x99}, {0x30, 0xc6, 0xa5, 0x94}, {0x59, 0x9c, 0xd2, 0xdf}, {0x52, 0x92, 0xdb, 0xd2}, {0x4f, 0x80, 
																											0xc0, 0xc5}, {0x44, 0x8e, 0xc9, 0xc8}, {0x75, 0xa4, 0xf6, 0xeb}, {0x7e, 0xaa, 0xff, 0xe6}, {0x63, 
																											    0xb8, 0xe4, 0xf1}, {0x68, 0xb6, 0xed, 0xfc}, {0xb1, 0xc, 0xa, 0x67}, {0xba, 0x2, 0x3, 0x6a}, {
																												0xa7, 0x10, 0x18, 0x7d}, {0xac, 0x1e, 0x11, 0x70}, {0x9d, 0x34, 0x2e, 0x53}, {0x96, 0x3a, 0x27, 
																												    0x5e}, {0x8b, 0x28, 0x3c, 0x49}, {0x80, 0x26, 0x35, 0x44}, {0xe9, 0x7c, 0x42, 0xf}, {0xe2, 0x72, 
																													0x4b, 0x2}, {0xff, 0x60, 0x50, 0x15}, {0xf4, 0x6e, 0x59, 0x18}, {0xc5, 0x44, 0x66, 0x3b}, {0xce, 
																													    0x4a, 0x6f, 0x36}, {0xd3, 0x58, 0x74, 0x21}, {0xd8, 0x56, 0x7d, 0x2c}, {0x7a, 0x37, 0xa1, 0xc}, {
																														0x71, 0x39, 0xa8, 0x1}, {0x6c, 0x2b, 0xb3, 0x16}, {0x67, 0x25, 0xba, 0x1b}, {0x56, 0xf, 0x85, 
																														    0x38}, {0x5d, 0x1, 0x8c, 0x35}, {0x40, 0x13, 0x97, 0x22}, {0x4b, 0x1d, 0x9e, 0x2f}, {0x22, 0x47, 
																															0xe9, 0x64}, {0x29, 0x49, 0xe0, 0x69}, {0x34, 0x5b, 0xfb, 0x7e}, {0x3f, 0x55, 0xf2, 0x73}, {0xe, 
																															    0x7f, 0xcd, 0x50}, {0x5, 0x71, 0xc4, 0x5d}, {0x18, 0x63, 0xdf, 0x4a}, {0x13, 0x6d, 0xd6, 0x47}, {
																																0xca, 0xd7, 0x31, 0xdc}, {0xc1, 0xd9, 0x38, 0xd1}, {0xdc, 0xcb, 0x23, 0xc6}, {0xd7, 0xc5, 0x2a, 
																																    0xcb}, {0xe6, 0xef, 0x15, 0xe8}, {0xed, 0xe1, 0x1c, 0xe5}, {0xf0, 0xf3, 0x7, 0xf2}, {0xfb, 0xfd, 
																																	0xe, 0xff}, {0x92, 0xa7, 0x79, 0xb4}, {0x99, 0xa9, 0x70, 0xb9}, {0x84, 0xbb, 0x6b, 0xae}, {0x8f, 
																																	    0xb5, 0x62, 0xa3}, {0xbe, 0x9f, 0x5d, 0x80}, {0xb5, 0x91, 0x54, 0x8d}, {0xa8, 0x83, 0x4f, 0x9a}, {
																																		0xa3, 0x8d, 0x46, 0x97}}
																																		;
static constant uchar U3[256][4]={{0x0, 0x0, 0x0, 0x0}, {0xd, 0xb, 0xe, 0x9}, {0x1a, 0x16, 0x1c, 0x12}, {0x17, 0x1d, 0x12, 
    0x1b}, {0x34, 0x2c, 0x38, 0x24}, {0x39, 0x27, 0x36, 0x2d}, {0x2e, 0x3a, 0x24, 0x36}, {0x23, 0x31, 
	0x2a, 0x3f}, {0x68, 0x58, 0x70, 0x48}, {0x65, 0x53, 0x7e, 0x41}, {0x72, 0x4e, 0x6c, 0x5a}, {0x7f, 
	    0x45, 0x62, 0x53}, {0x5c, 0x74, 0x48, 0x6c}, {0x51, 0x7f, 0x46, 0x65}, {0x46, 0x62, 0x54, 0x7e}, {
		0x4b, 0x69, 0x5a, 0x77}, {0xd0, 0xb0, 0xe0, 0x90}, {0xdd, 0xbb, 0xee, 0x99}, {0xca, 0xa6, 0xfc, 
		    0x82}, {0xc7, 0xad, 0xf2, 0x8b}, {0xe4, 0x9c, 0xd8, 0xb4}, {0xe9, 0x97, 0xd6, 0xbd}, {0xfe, 0x8a, 
			0xc4, 0xa6}, {0xf3, 0x81, 0xca, 0xaf}, {0xb8, 0xe8, 0x90, 0xd8}, {0xb5, 0xe3, 0x9e, 0xd1}, {0xa2, 
			    0xfe, 0x8c, 0xca}, {0xaf, 0xf5, 0x82, 0xc3}, {0x8c, 0xc4, 0xa8, 0xfc}, {0x81, 0xcf, 0xa6, 0xf5}, {
				0x96, 0xd2, 0xb4, 0xee}, {0x9b, 0xd9, 0xba, 0xe7}, {0xbb, 0x7b, 0xdb, 0x3b}, {0xb6, 0x70, 0xd5, 
				    0x32}, {0xa1, 0x6d, 0xc7, 0x29}, {0xac, 0x66, 0xc9, 0x20}, {0x8f, 0x57, 0xe3, 0x1f}, {0x82, 0x5c, 
					0xed, 0x16}, {0x95, 0x41, 0xff, 0xd}, {0x98, 0x4a, 0xf1, 0x4}, {0xd3, 0x23, 0xab, 0x73}, {0xde, 
					    0x28, 0xa5, 0x7a}, {0xc9, 0x35, 0xb7, 0x61}, {0xc4, 0x3e, 0xb9, 0x68}, {0xe7, 0xf, 0x93, 0x57}, {
						0xea, 0x4, 0x9d, 0x5e}, {0xfd, 0x19, 0x8f, 0x45}, {0xf0, 0x12, 0x81, 0x4c}, {0x6b, 0xcb, 0x3b, 
						    0xab}, {0x66, 0xc0, 0x35, 0xa2}, {0x71, 0xdd, 0x27, 0xb9}, {0x7c, 0xd6, 0x29, 0xb0}, {0x5f, 0xe7, 
							0x3, 0x8f}, {0x52, 0xec, 0xd, 0x86}, {0x45, 0xf1, 0x1f, 0x9d}, {0x48, 0xfa, 0x11, 0x94}, {0x3, 
							    0x93, 0x4b, 0xe3}, {0xe, 0x98, 0x45, 0xea}, {0x19, 0x85, 0x57, 0xf1}, {0x14, 0x8e, 0x59, 0xf8}, {
								0x37, 0xbf, 0x73, 0xc7}, {0x3a, 0xb4, 0x7d, 0xce}, {0x2d, 0xa9, 0x6f, 0xd5}, {0x20, 0xa2, 0x61, 
								    0xdc}, {0x6d, 0xf6, 0xad, 0x76}, {0x60, 0xfd, 0xa3, 0x7f}, {0x77, 0xe0, 0xb1, 0x64}, {0x7a, 0xeb, 
									0xbf, 0x6d}, {0x59, 0xda, 0x95, 0x52}, {0x54, 0xd1, 0x9b, 0x5b}, {0x43, 0xcc, 0x89, 0x40}, {0x4e, 
									    0xc7, 0x87, 0x49}, {0x5, 0xae, 0xdd, 0x3e}, {0x8, 0xa5, 0xd3, 0x37}, {0x1f, 0xb8, 0xc1, 0x2c}, {
										0x12, 0xb3, 0xcf, 0x25}, {0x31, 0x82, 0xe5, 0x1a}, {0x3c, 0x89, 0xeb, 0x13}, {0x2b, 0x94, 0xf9, 
										    0x8}, {0x26, 0x9f, 0xf7, 0x1}, {0xbd, 0x46, 0x4d, 0xe6}, {0xb0, 0x4d, 0x43, 0xef}, {0xa7, 0x50, 
											0x51, 0xf4}, {0xaa, 0x5b, 0x5f, 0xfd}, {0x89, 0x6a, 0x75, 0xc2}, {0x84, 0x61, 0x7b, 0xcb}, {0x93, 
											    0x7c, 0x69, 0xd0}, {0x9e, 0x77, 0x67, 0xd9}, {0xd5, 0x1e, 0x3d, 0xae}, {0xd8, 0x15, 0x33, 0xa7}, {
												0xcf, 0x8, 0x21, 0xbc}, {0xc2, 0x3, 0x2f, 0xb5}, {0xe1, 0x32, 0x5, 0x8a}, {0xec, 0x39, 0xb, 
												    0x83}, {0xfb, 0x24, 0x19, 0x98}, {0xf6, 0x2f, 0x17, 0x91}, {0xd6, 0x8d, 0x76, 0x4d}, {0xdb, 0x86, 
													0x78, 0x44}, {0xcc, 0x9b, 0x6a, 0x5f}, {0xc1, 0x90, 0x64, 0x56}, {0xe2, 0xa1, 0x4e, 0x69}, {0xef, 
													    0xaa, 0x40, 0x60}, {0xf8, 0xb7, 0x52, 0x7b}, {0xf5, 0xbc, 0x5c, 0x72}, {0xbe, 0xd5, 0x6, 0x5}, {
														0xb3, 0xde, 0x8, 0xc}, {0xa4, 0xc3, 0x1a, 0x17}, {0xa9, 0xc8, 0x14, 0x1e}, {0x8a, 0xf9, 0x3e, 
														    0x21}, {0x87, 0xf2, 0x30, 0x28}, {0x90, 0xef, 0x22, 0x33}, {0x9d, 0xe4, 0x2c, 0x3a}, {0x6, 0x3d, 
															0x96, 0xdd}, {0xb, 0x36, 0x98, 0xd4}, {0x1c, 0x2b, 0x8a, 0xcf}, {0x11, 0x20, 0x84, 0xc6}, {0x32, 
															    0x11, 0xae, 0xf9}, {0x3f, 0x1a, 0xa0, 0xf0}, {0x28, 0x7, 0xb2, 0xeb}, {0x25, 0xc, 0xbc, 0xe2}, {
																0x6e, 0x65, 0xe6, 0x95}, {0x63, 0x6e, 0xe8, 0x9c}, {0x74, 0x73, 0xfa, 0x87}, {0x79, 0x78, 0xf4, 
																    0x8e}, {0x5a, 0x49, 0xde, 0xb1}, {0x57, 0x42, 0xd0, 0xb8}, {0x40, 0x5f, 0xc2, 0xa3}, {0x4d, 0x54, 
																	0xcc, 0xaa}, {0xda, 0xf7, 0x41, 0xec}, {0xd7, 0xfc, 0x4f, 0xe5}, {0xc0, 0xe1, 0x5d, 0xfe}, {0xcd, 
																	    0xea, 0x53, 0xf7}, {0xee, 0xdb, 0x79, 0xc8}, {0xe3, 0xd0, 0x77, 0xc1}, {0xf4, 0xcd, 0x65, 0xda}, {
																		0xf9, 0xc6, 0x6b, 0xd3}, {0xb2, 0xaf, 0x31, 0xa4}, {0xbf, 0xa4, 0x3f, 0xad}, {0xa8, 0xb9, 0x2d, 
																		    0xb6}, {0xa5, 0xb2, 0x23, 0xbf}, {0x86, 0x83, 0x9, 0x80}, {0x8b, 0x88, 0x7, 0x89}, {0x9c, 0x95, 
																			0x15, 0x92}, {0x91, 0x9e, 0x1b, 0x9b}, {0xa, 0x47, 0xa1, 0x7c}, {0x7, 0x4c, 0xaf, 0x75}, {0x10, 
																			    0x51, 0xbd, 0x6e}, {0x1d, 0x5a, 0xb3, 0x67}, {0x3e, 0x6b, 0x99, 0x58}, {0x33, 0x60, 0x97, 0x51}, {
																				0x24, 0x7d, 0x85, 0x4a}, {0x29, 0x76, 0x8b, 0x43}, {0x62, 0x1f, 0xd1, 0x34}, {0x6f, 0x14, 0xdf, 
																				    0x3d}, {0x78, 0x9, 0xcd, 0x26}, {0x75, 0x2, 0xc3, 0x2f}, {0x56, 0x33, 0xe9, 0x10}, {0x5b, 0x38, 
																					0xe7, 0x19}, {0x4c, 0x25, 0xf5, 0x2}, {0x41, 0x2e, 0xfb, 0xb}, {0x61, 0x8c, 0x9a, 0xd7}, {0x6c, 
																					    0x87, 0x94, 0xde}, {0x7b, 0x9a, 0x86, 0xc5}, {0x76, 0x91, 0x88, 0xcc}, {0x55, 0xa0, 0xa2, 0xf3}, {
																						0x58, 0xab, 0xac, 0xfa}, {0x4f, 0xb6, 0xbe, 0xe1}, {0x42, 0xbd, 0xb0, 0xe8}, {0x9, 0xd4, 0xea, 
																						    0x9f}, {0x4, 0xdf, 0xe4, 0x96}, {0x13, 0xc2, 0xf6, 0x8d}, {0x1e, 0xc9, 0xf8, 0x84}, {0x3d, 0xf8, 
																							0xd2, 0xbb}, {0x30, 0xf3, 0xdc, 0xb2}, {0x27, 0xee, 0xce, 0xa9}, {0x2a, 0xe5, 0xc0, 0xa0}, {0xb1, 
																							    0x3c, 0x7a, 0x47}, {0xbc, 0x37, 0x74, 0x4e}, {0xab, 0x2a, 0x66, 0x55}, {0xa6, 0x21, 0x68, 0x5c}, {
																								0x85, 0x10, 0x42, 0x63}, {0x88, 0x1b, 0x4c, 0x6a}, {0x9f, 0x6, 0x5e, 0x71}, {0x92, 0xd, 0x50, 
																								    0x78}, {0xd9, 0x64, 0xa, 0xf}, {0xd4, 0x6f, 0x4, 0x6}, {0xc3, 0x72, 0x16, 0x1d}, {0xce, 0x79, 
																									0x18, 0x14}, {0xed, 0x48, 0x32, 0x2b}, {0xe0, 0x43, 0x3c, 0x22}, {0xf7, 0x5e, 0x2e, 0x39}, {0xfa, 
																									    0x55, 0x20, 0x30}, {0xb7, 0x1, 0xec, 0x9a}, {0xba, 0xa, 0xe2, 0x93}, {0xad, 0x17, 0xf0, 0x88}, {
																										0xa0, 0x1c, 0xfe, 0x81}, {0x83, 0x2d, 0xd4, 0xbe}, {0x8e, 0x26, 0xda, 0xb7}, {0x99, 0x3b, 0xc8, 
																										    0xac}, {0x94, 0x30, 0xc6, 0xa5}, {0xdf, 0x59, 0x9c, 0xd2}, {0xd2, 0x52, 0x92, 0xdb}, {0xc5, 0x4f, 
																											0x80, 0xc0}, {0xc8, 0x44, 0x8e, 0xc9}, {0xeb, 0x75, 0xa4, 0xf6}, {0xe6, 0x7e, 0xaa, 0xff}, {0xf1, 
																											    0x63, 0xb8, 0xe4}, {0xfc, 0x68, 0xb6, 0xed}, {0x67, 0xb1, 0xc, 0xa}, {0x6a, 0xba, 0x2, 0x3}, {
																												0x7d, 0xa7, 0x10, 0x18}, {0x70, 0xac, 0x1e, 0x11}, {0x53, 0x9d, 0x34, 0x2e}, {0x5e, 0x96, 0x3a, 
																												    0x27}, {0x49, 0x8b, 0x28, 0x3c}, {0x44, 0x80, 0x26, 0x35}, {0xf, 0xe9, 0x7c, 0x42}, {0x2, 0xe2, 
																													0x72, 0x4b}, {0x15, 0xff, 0x60, 0x50}, {0x18, 0xf4, 0x6e, 0x59}, {0x3b, 0xc5, 0x44, 0x66}, {0x36, 
																													    0xce, 0x4a, 0x6f}, {0x21, 0xd3, 0x58, 0x74}, {0x2c, 0xd8, 0x56, 0x7d}, {0xc, 0x7a, 0x37, 0xa1}, {
																														0x1, 0x71, 0x39, 0xa8}, {0x16, 0x6c, 0x2b, 0xb3}, {0x1b, 0x67, 0x25, 0xba}, {0x38, 0x56, 0xf, 
																														    0x85}, {0x35, 0x5d, 0x1, 0x8c}, {0x22, 0x40, 0x13, 0x97}, {0x2f, 0x4b, 0x1d, 0x9e}, {0x64, 0x22, 
																															0x47, 0xe9}, {0x69, 0x29, 0x49, 0xe0}, {0x7e, 0x34, 0x5b, 0xfb}, {0x73, 0x3f, 0x55, 0xf2}, {0x50, 
																															    0xe, 0x7f, 0xcd}, {0x5d, 0x5, 0x71, 0xc4}, {0x4a, 0x18, 0x63, 0xdf}, {0x47, 0x13, 0x6d, 0xd6}, {
																																0xdc, 0xca, 0xd7, 0x31}, {0xd1, 0xc1, 0xd9, 0x38}, {0xc6, 0xdc, 0xcb, 0x23}, {0xcb, 0xd7, 0xc5, 
																																    0x2a}, {0xe8, 0xe6, 0xef, 0x15}, {0xe5, 0xed, 0xe1, 0x1c}, {0xf2, 0xf0, 0xf3, 0x7}, {0xff, 0xfb, 
																																	0xfd, 0xe}, {0xb4, 0x92, 0xa7, 0x79}, {0xb9, 0x99, 0xa9, 0x70}, {0xae, 0x84, 0xbb, 0x6b}, {0xa3, 
																																	    0x8f, 0xb5, 0x62}, {0x80, 0xbe, 0x9f, 0x5d}, {0x8d, 0xb5, 0x91, 0x54}, {0x9a, 0xa8, 0x83, 0x4f}, {
																																		0x97, 0xa3, 0x8d, 0x46}};
static constant uchar U4[256][4]= {{0x0, 0x0, 0x0, 0x0}, {0x9, 0xd, 0xb, 0xe}, {0x12, 0x1a, 0x16, 0x1c}, {0x1b, 0x17, 0x1d, 
    0x12}, {0x24, 0x34, 0x2c, 0x38}, {0x2d, 0x39, 0x27, 0x36}, {0x36, 0x2e, 0x3a, 0x24}, {0x3f, 0x23, 
	0x31, 0x2a}, {0x48, 0x68, 0x58, 0x70}, {0x41, 0x65, 0x53, 0x7e}, {0x5a, 0x72, 0x4e, 0x6c}, {0x53, 
	    0x7f, 0x45, 0x62}, {0x6c, 0x5c, 0x74, 0x48}, {0x65, 0x51, 0x7f, 0x46}, {0x7e, 0x46, 0x62, 0x54}, {
		0x77, 0x4b, 0x69, 0x5a}, {0x90, 0xd0, 0xb0, 0xe0}, {0x99, 0xdd, 0xbb, 0xee}, {0x82, 0xca, 0xa6, 
		    0xfc}, {0x8b, 0xc7, 0xad, 0xf2}, {0xb4, 0xe4, 0x9c, 0xd8}, {0xbd, 0xe9, 0x97, 0xd6}, {0xa6, 0xfe, 
			0x8a, 0xc4}, {0xaf, 0xf3, 0x81, 0xca}, {0xd8, 0xb8, 0xe8, 0x90}, {0xd1, 0xb5, 0xe3, 0x9e}, {0xca, 
			    0xa2, 0xfe, 0x8c}, {0xc3, 0xaf, 0xf5, 0x82}, {0xfc, 0x8c, 0xc4, 0xa8}, {0xf5, 0x81, 0xcf, 0xa6}, {
				0xee, 0x96, 0xd2, 0xb4}, {0xe7, 0x9b, 0xd9, 0xba}, {0x3b, 0xbb, 0x7b, 0xdb}, {0x32, 0xb6, 0x70, 
				    0xd5}, {0x29, 0xa1, 0x6d, 0xc7}, {0x20, 0xac, 0x66, 0xc9}, {0x1f, 0x8f, 0x57, 0xe3}, {0x16, 0x82, 
					0x5c, 0xed}, {0xd, 0x95, 0x41, 0xff}, {0x4, 0x98, 0x4a, 0xf1}, {0x73, 0xd3, 0x23, 0xab}, {0x7a, 
					    0xde, 0x28, 0xa5}, {0x61, 0xc9, 0x35, 0xb7}, {0x68, 0xc4, 0x3e, 0xb9}, {0x57, 0xe7, 0xf, 0x93}, {
						0x5e, 0xea, 0x4, 0x9d}, {0x45, 0xfd, 0x19, 0x8f}, {0x4c, 0xf0, 0x12, 0x81}, {0xab, 0x6b, 0xcb, 
						    0x3b}, {0xa2, 0x66, 0xc0, 0x35}, {0xb9, 0x71, 0xdd, 0x27}, {0xb0, 0x7c, 0xd6, 0x29}, {0x8f, 0x5f, 
							0xe7, 0x3}, {0x86, 0x52, 0xec, 0xd}, {0x9d, 0x45, 0xf1, 0x1f}, {0x94, 0x48, 0xfa, 0x11}, {0xe3, 
							    0x3, 0x93, 0x4b}, {0xea, 0xe, 0x98, 0x45}, {0xf1, 0x19, 0x85, 0x57}, {0xf8, 0x14, 0x8e, 0x59}, {
								0xc7, 0x37, 0xbf, 0x73}, {0xce, 0x3a, 0xb4, 0x7d}, {0xd5, 0x2d, 0xa9, 0x6f}, {0xdc, 0x20, 0xa2, 
								    0x61}, {0x76, 0x6d, 0xf6, 0xad}, {0x7f, 0x60, 0xfd, 0xa3}, {0x64, 0x77, 0xe0, 0xb1}, {0x6d, 0x7a, 
									0xeb, 0xbf}, {0x52, 0x59, 0xda, 0x95}, {0x5b, 0x54, 0xd1, 0x9b}, {0x40, 0x43, 0xcc, 0x89}, {0x49, 
									    0x4e, 0xc7, 0x87}, {0x3e, 0x5, 0xae, 0xdd}, {0x37, 0x8, 0xa5, 0xd3}, {0x2c, 0x1f, 0xb8, 0xc1}, {
										0x25, 0x12, 0xb3, 0xcf}, {0x1a, 0x31, 0x82, 0xe5}, {0x13, 0x3c, 0x89, 0xeb}, {0x8, 0x2b, 0x94, 
										    0xf9}, {0x1, 0x26, 0x9f, 0xf7}, {0xe6, 0xbd, 0x46, 0x4d}, {0xef, 0xb0, 0x4d, 0x43}, {0xf4, 0xa7, 
											0x50, 0x51}, {0xfd, 0xaa, 0x5b, 0x5f}, {0xc2, 0x89, 0x6a, 0x75}, {0xcb, 0x84, 0x61, 0x7b}, {0xd0, 
											    0x93, 0x7c, 0x69}, {0xd9, 0x9e, 0x77, 0x67}, {0xae, 0xd5, 0x1e, 0x3d}, {0xa7, 0xd8, 0x15, 0x33}, {
												0xbc, 0xcf, 0x8, 0x21}, {0xb5, 0xc2, 0x3, 0x2f}, {0x8a, 0xe1, 0x32, 0x5}, {0x83, 0xec, 0x39, 
												    0xb}, {0x98, 0xfb, 0x24, 0x19}, {0x91, 0xf6, 0x2f, 0x17}, {0x4d, 0xd6, 0x8d, 0x76}, {0x44, 0xdb, 
													0x86, 0x78}, {0x5f, 0xcc, 0x9b, 0x6a}, {0x56, 0xc1, 0x90, 0x64}, {0x69, 0xe2, 0xa1, 0x4e}, {0x60, 
													    0xef, 0xaa, 0x40}, {0x7b, 0xf8, 0xb7, 0x52}, {0x72, 0xf5, 0xbc, 0x5c}, {0x5, 0xbe, 0xd5, 0x6}, {
														0xc, 0xb3, 0xde, 0x8}, {0x17, 0xa4, 0xc3, 0x1a}, {0x1e, 0xa9, 0xc8, 0x14}, {0x21, 0x8a, 0xf9, 
														    0x3e}, {0x28, 0x87, 0xf2, 0x30}, {0x33, 0x90, 0xef, 0x22}, {0x3a, 0x9d, 0xe4, 0x2c}, {0xdd, 0x6, 
															0x3d, 0x96}, {0xd4, 0xb, 0x36, 0x98}, {0xcf, 0x1c, 0x2b, 0x8a}, {0xc6, 0x11, 0x20, 0x84}, {0xf9, 
															    0x32, 0x11, 0xae}, {0xf0, 0x3f, 0x1a, 0xa0}, {0xeb, 0x28, 0x7, 0xb2}, {0xe2, 0x25, 0xc, 0xbc}, {
																0x95, 0x6e, 0x65, 0xe6}, {0x9c, 0x63, 0x6e, 0xe8}, {0x87, 0x74, 0x73, 0xfa}, {0x8e, 0x79, 0x78, 
																    0xf4}, {0xb1, 0x5a, 0x49, 0xde}, {0xb8, 0x57, 0x42, 0xd0}, {0xa3, 0x40, 0x5f, 0xc2}, {0xaa, 0x4d, 
																	0x54, 0xcc}, {0xec, 0xda, 0xf7, 0x41}, {0xe5, 0xd7, 0xfc, 0x4f}, {0xfe, 0xc0, 0xe1, 0x5d}, {0xf7, 
																	    0xcd, 0xea, 0x53}, {0xc8, 0xee, 0xdb, 0x79}, {0xc1, 0xe3, 0xd0, 0x77}, {0xda, 0xf4, 0xcd, 0x65}, {
																		0xd3, 0xf9, 0xc6, 0x6b}, {0xa4, 0xb2, 0xaf, 0x31}, {0xad, 0xbf, 0xa4, 0x3f}, {0xb6, 0xa8, 0xb9, 
																		    0x2d}, {0xbf, 0xa5, 0xb2, 0x23}, {0x80, 0x86, 0x83, 0x9}, {0x89, 0x8b, 0x88, 0x7}, {0x92, 0x9c, 
																			0x95, 0x15}, {0x9b, 0x91, 0x9e, 0x1b}, {0x7c, 0xa, 0x47, 0xa1}, {0x75, 0x7, 0x4c, 0xaf}, {0x6e, 
																			    0x10, 0x51, 0xbd}, {0x67, 0x1d, 0x5a, 0xb3}, {0x58, 0x3e, 0x6b, 0x99}, {0x51, 0x33, 0x60, 0x97}, {
																				0x4a, 0x24, 0x7d, 0x85}, {0x43, 0x29, 0x76, 0x8b}, {0x34, 0x62, 0x1f, 0xd1}, {0x3d, 0x6f, 0x14, 
																				    0xdf}, {0x26, 0x78, 0x9, 0xcd}, {0x2f, 0x75, 0x2, 0xc3}, {0x10, 0x56, 0x33, 0xe9}, {0x19, 0x5b, 
																					0x38, 0xe7}, {0x2, 0x4c, 0x25, 0xf5}, {0xb, 0x41, 0x2e, 0xfb}, {0xd7, 0x61, 0x8c, 0x9a}, {0xde, 
																					    0x6c, 0x87, 0x94}, {0xc5, 0x7b, 0x9a, 0x86}, {0xcc, 0x76, 0x91, 0x88}, {0xf3, 0x55, 0xa0, 0xa2}, {
																						0xfa, 0x58, 0xab, 0xac}, {0xe1, 0x4f, 0xb6, 0xbe}, {0xe8, 0x42, 0xbd, 0xb0}, {0x9f, 0x9, 0xd4, 
																						    0xea}, {0x96, 0x4, 0xdf, 0xe4}, {0x8d, 0x13, 0xc2, 0xf6}, {0x84, 0x1e, 0xc9, 0xf8}, {0xbb, 0x3d, 
																							0xf8, 0xd2}, {0xb2, 0x30, 0xf3, 0xdc}, {0xa9, 0x27, 0xee, 0xce}, {0xa0, 0x2a, 0xe5, 0xc0}, {0x47, 
																							    0xb1, 0x3c, 0x7a}, {0x4e, 0xbc, 0x37, 0x74}, {0x55, 0xab, 0x2a, 0x66}, {0x5c, 0xa6, 0x21, 0x68}, {
																								0x63, 0x85, 0x10, 0x42}, {0x6a, 0x88, 0x1b, 0x4c}, {0x71, 0x9f, 0x6, 0x5e}, {0x78, 0x92, 0xd, 
																								    0x50}, {0xf, 0xd9, 0x64, 0xa}, {0x6, 0xd4, 0x6f, 0x4}, {0x1d, 0xc3, 0x72, 0x16}, {0x14, 0xce, 
																									0x79, 0x18}, {0x2b, 0xed, 0x48, 0x32}, {0x22, 0xe0, 0x43, 0x3c}, {0x39, 0xf7, 0x5e, 0x2e}, {0x30, 
																									    0xfa, 0x55, 0x20}, {0x9a, 0xb7, 0x1, 0xec}, {0x93, 0xba, 0xa, 0xe2}, {0x88, 0xad, 0x17, 0xf0}, {
																										0x81, 0xa0, 0x1c, 0xfe}, {0xbe, 0x83, 0x2d, 0xd4}, {0xb7, 0x8e, 0x26, 0xda}, {0xac, 0x99, 0x3b, 
																										    0xc8}, {0xa5, 0x94, 0x30, 0xc6}, {0xd2, 0xdf, 0x59, 0x9c}, {0xdb, 0xd2, 0x52, 0x92}, {0xc0, 0xc5, 
																											0x4f, 0x80}, {0xc9, 0xc8, 0x44, 0x8e}, {0xf6, 0xeb, 0x75, 0xa4}, {0xff, 0xe6, 0x7e, 0xaa}, {0xe4, 
																											    0xf1, 0x63, 0xb8}, {0xed, 0xfc, 0x68, 0xb6}, {0xa, 0x67, 0xb1, 0xc}, {0x3, 0x6a, 0xba, 0x2}, {
																												0x18, 0x7d, 0xa7, 0x10}, {0x11, 0x70, 0xac, 0x1e}, {0x2e, 0x53, 0x9d, 0x34}, {0x27, 0x5e, 0x96, 
																												    0x3a}, {0x3c, 0x49, 0x8b, 0x28}, {0x35, 0x44, 0x80, 0x26}, {0x42, 0xf, 0xe9, 0x7c}, {0x4b, 0x2, 
																													0xe2, 0x72}, {0x50, 0x15, 0xff, 0x60}, {0x59, 0x18, 0xf4, 0x6e}, {0x66, 0x3b, 0xc5, 0x44}, {0x6f, 
																													    0x36, 0xce, 0x4a}, {0x74, 0x21, 0xd3, 0x58}, {0x7d, 0x2c, 0xd8, 0x56}, {0xa1, 0xc, 0x7a, 0x37}, {
																														0xa8, 0x1, 0x71, 0x39}, {0xb3, 0x16, 0x6c, 0x2b}, {0xba, 0x1b, 0x67, 0x25}, {0x85, 0x38, 0x56, 
																														    0xf}, {0x8c, 0x35, 0x5d, 0x1}, {0x97, 0x22, 0x40, 0x13}, {0x9e, 0x2f, 0x4b, 0x1d}, {0xe9, 0x64, 
																															0x22, 0x47}, {0xe0, 0x69, 0x29, 0x49}, {0xfb, 0x7e, 0x34, 0x5b}, {0xf2, 0x73, 0x3f, 0x55}, {0xcd, 
																															    0x50, 0xe, 0x7f}, {0xc4, 0x5d, 0x5, 0x71}, {0xdf, 0x4a, 0x18, 0x63}, {0xd6, 0x47, 0x13, 0x6d}, {
																																0x31, 0xdc, 0xca, 0xd7}, {0x38, 0xd1, 0xc1, 0xd9}, {0x23, 0xc6, 0xdc, 0xcb}, {0x2a, 0xcb, 0xd7, 
																																    0xc5}, {0x15, 0xe8, 0xe6, 0xef}, {0x1c, 0xe5, 0xed, 0xe1}, {0x7, 0xf2, 0xf0, 0xf3}, {0xe, 0xff, 
																																	0xfb, 0xfd}, {0x79, 0xb4, 0x92, 0xa7}, {0x70, 0xb9, 0x99, 0xa9}, {0x6b, 0xae, 0x84, 0xbb}, {0x62, 
																																	    0xa3, 0x8f, 0xb5}, {0x5d, 0x80, 0xbe, 0x9f}, {0x54, 0x8d, 0xb5, 0x91}, {0x4f, 0x9a, 0xa8, 0x83}, {
																																		0x46, 0x97, 0xa3, 0x8d}};


inline void Xor128_2(void *dest,const void *arg1,const void *arg2){
    #pragma unroll
    for (int I=0;I<16;I++)
	((uchar*)dest)[I]=((uchar*)arg1)[I]^((uchar*)arg2)[I];
}
inline void Xor128_2_global(void *dest,global void *arg1,const void *arg2){
    #pragma unroll
    for (int I=0;I<16;I++)
	((uchar*)dest)[I]=((global uchar*)arg1)[I]^((uchar*)arg2)[I];
}

inline void Xor128_4(uchar *dest,const constant uchar *arg1,const constant uchar *arg2,
	const constant uchar *arg3,const constant uchar *arg4){
    #pragma unroll
    for (int I=0;I<4;I++)
	dest[I]=arg1[I]^arg2[I]^arg3[I]^arg4[I];
}

inline void Copy128(uchar *dest, uchar *src){
    #pragma unroll
    for (int I=0;I<16;I++)
	dest[I]=src[I];
}
inline void Copy128_global(uchar *dest,global uchar *src){
#pragma unroll
        for (int I=0;I<16;I++)
		dest[I]=src[I];
}
inline void Copy128_g_in(global uchar *dest, uchar *src){
#pragma unroll
        for (int I=0;I<16;I++)
		dest[I]=src[I];
}


  
void blockDecrypt(aes_context *aes, global uchar *input, uint inputLen, global uchar *outBuffer)
{
  if (inputLen <= 0)
    return;

  size_t numBlocks=inputLen/16;

  uchar block[16], iv[4][4];
  //memcpy(iv,aes->m_initVector,16); 
  #pragma unroll
  for(int i = 0; i < 4; i++)
      for(int j = 0; j < 4; j++)
	  iv[i][j] = aes->m_initVector[i*4+j];

  for (size_t i = numBlocks; i > 0; i--)
  {
    uchar temp[4][4];
    
    Xor128_2_global(temp,input,aes->m_expandedKey[aes->m_uRounds]);

    Xor128_4(block,   T5[temp[0][0]],T6[temp[3][1]],T7[temp[2][2]],T8[temp[1][3]]);
    Xor128_4(block+4, T5[temp[1][0]],T6[temp[0][1]],T7[temp[3][2]],T8[temp[2][3]]);
    Xor128_4(block+8, T5[temp[2][0]],T6[temp[1][1]],T7[temp[0][2]],T8[temp[3][3]]);
    Xor128_4(block+12,T5[temp[3][0]],T6[temp[2][1]],T7[temp[1][2]],T8[temp[0][3]]);

    for(int r = aes->m_uRounds-1; r > 1; r--)
    {
      Xor128_2(temp,block,aes->m_expandedKey[r]);
      Xor128_4(block,   T5[temp[0][0]],T6[temp[3][1]],T7[temp[2][2]],T8[temp[1][3]]);
      Xor128_4(block+4, T5[temp[1][0]],T6[temp[0][1]],T7[temp[3][2]],T8[temp[2][3]]);
      Xor128_4(block+8, T5[temp[2][0]],T6[temp[1][1]],T7[temp[0][2]],T8[temp[3][3]]);
      Xor128_4(block+12,T5[temp[3][0]],T6[temp[2][1]],T7[temp[1][2]],T8[temp[0][3]]);
    }
   
    Xor128_2(temp,block,aes->m_expandedKey[1]);
    block[ 0] = S5[temp[0][0]];
    block[ 1] = S5[temp[3][1]];
    block[ 2] = S5[temp[2][2]];
    block[ 3] = S5[temp[1][3]];
    block[ 4] = S5[temp[1][0]];
    block[ 5] = S5[temp[0][1]];
    block[ 6] = S5[temp[3][2]];
    block[ 7] = S5[temp[2][3]];
    block[ 8] = S5[temp[2][0]];
    block[ 9] = S5[temp[1][1]];
    block[10] = S5[temp[0][2]];
    block[11] = S5[temp[3][3]];
    block[12] = S5[temp[3][0]];
    block[13] = S5[temp[2][1]];
    block[14] = S5[temp[1][2]];
    block[15] = S5[temp[0][3]];
    Xor128_2(block,block,aes->m_expandedKey[0]);

    if (aes->CBCMode)
      Xor128_2(block,block,iv);

    Copy128_global((uchar*)iv,input);
    Copy128_g_in(outBuffer,block);

    input += 16;
    outBuffer += 16;
  }

//  memcpy(aes->m_initVector,iv,16);
  #pragma unroll
  for(int i = 0; i < 16; i++)
    aes->m_initVector[i] = (*iv)[i];

}

void keySched(aes_context *aes,uchar key[_MAX_KEY_COLUMNS][4])
{
  int j,rconpointer = 0;

  // Calculate the necessary round keys
  // The number of calculations depends on keyBits and blockBits
  int uKeyColumns = aes->m_uRounds - 6;

  uchar tempKey[_MAX_KEY_COLUMNS][4];

  // Copy the input key to the temporary key matrix

//  memcpy(tempKey,key,sizeof(tempKey));
  #pragma unroll
  for(int i = 0; i < _MAX_KEY_COLUMNS; i++)
      #pragma unroll
      for(int j = 0; j < 4; j++)
	  tempKey[i][j] = key[i][j];

  int r = 0;
  int t = 0;

  // copy values into round key array
  for(j = 0;(j < uKeyColumns) && (r <= aes->m_uRounds); )
  {
    for(;(j < uKeyColumns) && (t < 4); j++, t++)
      for (int k=0;k<4;k++)
        aes->m_expandedKey[r][t][k]=tempKey[j][k];

    if(t == 4)
    {
      r++;
      t = 0;
    }
  }
    
  while(r <= aes->m_uRounds)
  {
    tempKey[0][0] ^= S[tempKey[uKeyColumns-1][1]];
    tempKey[0][1] ^= S[tempKey[uKeyColumns-1][2]];
    tempKey[0][2] ^= S[tempKey[uKeyColumns-1][3]];
    tempKey[0][3] ^= S[tempKey[uKeyColumns-1][0]];
    tempKey[0][0] ^= rcon[rconpointer++];

    if (uKeyColumns != 8)
      for(j = 1; j < uKeyColumns; j++)
        for (int k=0;k<4;k++)
          tempKey[j][k] ^= tempKey[j-1][k];
    else
    {
      for(j = 1; j < uKeyColumns/2; j++)
        for (int k=0;k<4;k++)
          tempKey[j][k] ^= tempKey[j-1][k];

      tempKey[uKeyColumns/2][0] ^= S[tempKey[uKeyColumns/2 - 1][0]];
      tempKey[uKeyColumns/2][1] ^= S[tempKey[uKeyColumns/2 - 1][1]];
      tempKey[uKeyColumns/2][2] ^= S[tempKey[uKeyColumns/2 - 1][2]];
      tempKey[uKeyColumns/2][3] ^= S[tempKey[uKeyColumns/2 - 1][3]];
      for(j = uKeyColumns/2 + 1; j < uKeyColumns; j++)
        for (int k=0;k<4;k++)
          tempKey[j][k] ^= tempKey[j-1][k];
    }
    for(j = 0; (j < uKeyColumns) && (r <= aes->m_uRounds); )
    {
      for(; (j < uKeyColumns) && (t < 4); j++, t++)
        for (int k=0;k<4;k++)
          aes->m_expandedKey[r][t][k] = tempKey[j][k];
      if(t == 4)
      {
        r++;
        t = 0;
      }
    }
  }   
}

void keyEncToDec(aes_context *aes)
{
  for(int r = 1; r < aes->m_uRounds; r++)
  {
    uchar n_expandedKey[4][4];
    for (int i = 0; i < 4; i++)
      for (int j = 0; j < 4; j++)
      {
        uchar *w=aes->m_expandedKey[r][j];
        n_expandedKey[j][i]=U1[w[0]][i]^U2[w[1]][i]^U3[w[2]][i]^U4[w[3]][i];
      }
 //   memcpy(aes->m_expandedKey[r],n_expandedKey,sizeof(aes->m_expandedKey[0]));
    #pragma unroll
    for(int i = 0; i < 4; i++)
	#pragma unroll
	for(int j = 0; j < 4; j++)
	    aes->m_expandedKey[r][j][i] = n_expandedKey[j][i];
  }
} 


#define ff_poly 0x011b
#define ff_hi   0x80

#define FFinv(x)    ((x) ? pow[255 - log[x]]: 0)

#define FFmul02(x) (x ? pow[log[x] + 0x19] : 0)
#define FFmul03(x) (x ? pow[log[x] + 0x01] : 0)
#define FFmul09(x) (x ? pow[log[x] + 0xc7] : 0)
#define FFmul0b(x) (x ? pow[log[x] + 0x68] : 0)
#define FFmul0d(x) (x ? pow[log[x] + 0xee] : 0)
#define FFmul0e(x) (x ? pow[log[x] + 0xdf] : 0)
#define fwd_affine(x) \
    (w = (uint)x, w ^= (w<<1)^(w<<2)^(w<<3)^(w<<4), (uchar)(0x63^(w^(w>>8))))

#define inv_affine(x) \
    (w = (uint)x, w = (w<<1)^(w<<3)^(w<<6), (uchar)(0x05^(w^(w>>8))))

void GenerateTables()
{
  uchar pow[512],log[256];
  int i = 0, w = 1; 
  do
  {   
    pow[i] = (uchar)w;
    pow[i + 255] = (uchar)w;
    log[w] = (uchar)i++;
    w ^=  (w << 1) ^ (w & ff_hi ? ff_poly : 0);
  } while (w != 1);
 
  for (int i = 0,w = 1; i < sizeof(rcon)/sizeof(rcon[0]); i++)
  {
    rcon[i] = w;
    w = (w << 1) ^ (w & ff_hi ? ff_poly : 0);
  }
  for(int i = 0; i < 256; ++i)
  {   
    uchar b=S[i]=fwd_affine(FFinv((uchar)i));
    S5[i] = b = FFinv(inv_affine((uchar)i));
    U1[b][3]=U2[b][0]=U3[b][1]=U4[b][2]=T5[i][3]=T6[i][0]=T7[i][1]=T8[i][2]=FFmul0b(b);
    U1[b][1]=U2[b][2]=U3[b][3]=U4[b][0]=T5[i][1]=T6[i][2]=T7[i][3]=T8[i][0]=FFmul09(b);
    U1[b][2]=U2[b][3]=U3[b][0]=U4[b][1]=T5[i][2]=T6[i][3]=T7[i][0]=T8[i][1]=FFmul0d(b);
    U1[b][0]=U2[b][1]=U3[b][2]=U4[b][3]=T5[i][0]=T6[i][1]=T7[i][2]=T8[i][3]=FFmul0e(b);
  }
}
void Init(aes_context *aes, const uchar *key,uint keyLen, constant uchar * initVector){

  aes->CBCMode = true;
  //GenerateTables();
  uint uKeyLenInuchars;
  switch(keyLen)
  {
    case 128:
      uKeyLenInuchars = 16;
      aes->m_uRounds = 10;
      break;
    case 192:
      uKeyLenInuchars = 24;
      aes->m_uRounds = 12;
      break;
    case 256:
      uKeyLenInuchars = 32;
      aes->m_uRounds = 14;
      break;
  }

  uchar keyMatrix[_MAX_KEY_COLUMNS][4];
//  memset(aes->m_expandedKey, 0, 15*4*4);
  #pragma unroll
  for(int i = 0; i < 15*4*4; i++)
    aes->m_initVector[i] =0 ;
  for(uint i = 0; i < uKeyLenInuchars; i++)
    keyMatrix[i >> 2][i & 3] = key[i]; 

//    memset(aes->m_initVector, 0, sizeof(aes->m_initVector));
  #pragma unroll
  for(int i = 0; i < MAX_IV_SIZE; i++)
      aes->m_initVector[i] = initVector[i];

  keySched(aes,keyMatrix);

  keyEncToDec(aes);
}

#define ROL(x,c) rotate((uint)x,(uint)c)

#define ROUNDTAIL(a,b,e,f,i,k,w)  \
	e += ROL(a,5) + f + k + w[i];  \
	b = ROL(b,30);

#define F1(b,c,d) (d ^ (b & (c ^ d)))
#define F2(b,c,d) (b ^ c ^ d)
#define F3(b,c,d) ((b & c) ^ (b & d) ^ (c & d))
#define F4(b,c,d) (b ^ c ^ d)


#define LOADSCHEDULE(i, w, block)\
        w[i] = (block+i*4)[0] << 24 | (block+i*4)[1] << 16 | (block+i*4)[2] << 8 | (block+i*4)[3];

#define SCHEDULE(i, w) \
        w[i] = ROL((w[i-3] ^ w[i-8] ^ w[i-14] ^ w[i-16]), 1);

#define ROUND0s(a,b,c,d,e,i,w,block) \
        LOADSCHEDULE(i, w, block)\
        ROUNDTAIL(a, b, e, F1(b, c, d), i, 0x5A827999, w)

#define ROUND0(a,b,c,d,e,i,w) \
        SCHEDULE(i, w) \
        ROUNDTAIL(a, b, e, F1(b, c, d), i, 0x5A827999, w)

#define ROUND1(a,b,c,d,e,i,w) \
        SCHEDULE(i, w) \
        ROUNDTAIL(a, b, e, F2(b, c, d), i, 0x6ED9EBA1, w)

#define ROUND2(a,b,c,d,e,i,w) \
        SCHEDULE(i, w) \
        ROUNDTAIL(a, b, e, F3(b, c, d), i, 0x8F1BBCDC, w)

#define ROUND3(a,b,c,d,e,i,w) \
        SCHEDULE(i, w) \
        ROUNDTAIL(a, b, e, F4(b, c, d), i, 0xCA62C1D6, w)

void inline sha1(const uchar* msg, uint len, uchar* output){
    uint h0 = 0x67452301;
    uint h1 = 0xEFCDAB89;
    uint h2 = 0x98BADCFE;
    uint h3 = 0x10325476;
    uint h4 = 0xC3D2E1F0;
    
    uint chunks = ((len+9)/64)+1;
    uint padSpace = 64-(len%64);
    uint padInChunk;
    bool longPad;
    
    uchar msg_pad[64];
    uint w[80] = {0};
    
    if(padSpace < 9){
        padInChunk = chunks-2;
        longPad = true;
    }else{
        padInChunk = chunks-1;
        longPad = false;
    }
    
    for(uint chunk = 0;chunk<chunks;chunk++){
        
        if(chunk < padInChunk){
	    // ::memcpy(msg_pad,msg+chunk*64,64);
	    #pragma unroll
	    for (int i = 0; i < 64; i++)
		msg_pad[i]= (msg+chunk*64)[i];
        }else if(chunk == padInChunk){
            uint padStart = len%64;
            //memcpy(msg_pad,msg+chunk*64,padStart);
	    #pragma unroll
	    for (int i = 0; i < padStart; i++)
		msg_pad[i]= (msg+chunk*64)[i];
            msg_pad[padStart] = 0x80;
            if(longPad){
                // pad in last two chunks
                for(uint i = padStart+1;i<64;i++){
                    msg_pad[i] = 0;
                }
            }else{
                // pad in last chunk
                for(uint i = padStart+1;i<64-4;i++){
                    msg_pad[i] = 0;
                }
                ulong bit_len = len*8;
                msg_pad[60] = (bit_len >> 24) & 0xFF;
                msg_pad[61] = (bit_len >> 16) & 0xFF;
                msg_pad[62] = (bit_len >> 8) & 0xFF;
                msg_pad[63] = bit_len & 0xFF;
            }
        }else{
            for(uint i = 0;i<64-4;i++){
                    msg_pad[i] = 0;
            }
            ulong bit_len = len*8;
            msg_pad[60] = (bit_len >> 24) & 0xFF;
            msg_pad[61] = (bit_len >> 16) & 0xFF;
            msg_pad[62] = (bit_len >> 8) & 0xFF;
            msg_pad[63] = bit_len & 0xFF;
        }
        
        uint a = h0;
        uint b = h1;
        uint c = h2;
        uint d = h3;
        uint e = h4;

        
	ROUND0s(a, b, c, d, e,  0, w, msg_pad)
	ROUND0s(e, a, b, c, d,  1, w, msg_pad)
	ROUND0s(d, e, a, b, c,  2, w, msg_pad)
	ROUND0s(c, d, e, a, b,  3, w, msg_pad)
	ROUND0s(b, c, d, e, a,  4, w, msg_pad)
	ROUND0s(a, b, c, d, e,  5, w, msg_pad)
	ROUND0s(e, a, b, c, d,  6, w, msg_pad)
	ROUND0s(d, e, a, b, c,  7, w, msg_pad)
	ROUND0s(c, d, e, a, b,  8, w, msg_pad)
	ROUND0s(b, c, d, e, a,  9, w, msg_pad)
	ROUND0s(a, b, c, d, e, 10, w, msg_pad)
	ROUND0s(e, a, b, c, d, 11, w, msg_pad)
	ROUND0s(d, e, a, b, c, 12, w, msg_pad)
	ROUND0s(c, d, e, a, b, 13, w, msg_pad)
	ROUND0s(b, c, d, e, a, 14, w, msg_pad)
	ROUND0s(a, b, c, d, e, 15, w, msg_pad)
	ROUND0(e, a, b, c, d, 16, w)
	ROUND0(d, e, a, b, c, 17, w)
	ROUND0(c, d, e, a, b, 18, w)
	ROUND0(b, c, d, e, a, 19, w)
	ROUND1(a, b, c, d, e, 20, w)
	ROUND1(e, a, b, c, d, 21, w)
	ROUND1(d, e, a, b, c, 22, w)
	ROUND1(c, d, e, a, b, 23, w)
	ROUND1(b, c, d, e, a, 24, w)
	ROUND1(a, b, c, d, e, 25, w)
	ROUND1(e, a, b, c, d, 26, w)
	ROUND1(d, e, a, b, c, 27, w)
	ROUND1(c, d, e, a, b, 28, w)
	ROUND1(b, c, d, e, a, 29, w)
	ROUND1(a, b, c, d, e, 30, w)
	ROUND1(e, a, b, c, d, 31, w)
	ROUND1(d, e, a, b, c, 32, w)
	ROUND1(c, d, e, a, b, 33, w)
	ROUND1(b, c, d, e, a, 34, w)
	ROUND1(a, b, c, d, e, 35, w)
	ROUND1(e, a, b, c, d, 36, w)
	ROUND1(d, e, a, b, c, 37, w)
	ROUND1(c, d, e, a, b, 38, w)
	ROUND1(b, c, d, e, a, 39, w)
	ROUND2(a, b, c, d, e, 40, w)
	ROUND2(e, a, b, c, d, 41, w)
	ROUND2(d, e, a, b, c, 42, w)
	ROUND2(c, d, e, a, b, 43, w)
	ROUND2(b, c, d, e, a, 44, w)
	ROUND2(a, b, c, d, e, 45, w)
	ROUND2(e, a, b, c, d, 46, w)
	ROUND2(d, e, a, b, c, 47, w)
	ROUND2(c, d, e, a, b, 48, w)
	ROUND2(b, c, d, e, a, 49, w)
	ROUND2(a, b, c, d, e, 50, w)
	ROUND2(e, a, b, c, d, 51, w)
	ROUND2(d, e, a, b, c, 52, w)
	ROUND2(c, d, e, a, b, 53, w)
	ROUND2(b, c, d, e, a, 54, w)
	ROUND2(a, b, c, d, e, 55, w)
	ROUND2(e, a, b, c, d, 56, w)
	ROUND2(d, e, a, b, c, 57, w)
	ROUND2(c, d, e, a, b, 58, w)
	ROUND2(b, c, d, e, a, 59, w)
	ROUND3(a, b, c, d, e, 60, w)
	ROUND3(e, a, b, c, d, 61, w)
	ROUND3(d, e, a, b, c, 62, w)
	ROUND3(c, d, e, a, b, 63, w)
	ROUND3(b, c, d, e, a, 64, w)
	ROUND3(a, b, c, d, e, 65, w)
	ROUND3(e, a, b, c, d, 66, w)
	ROUND3(d, e, a, b, c, 67, w)
	ROUND3(c, d, e, a, b, 68, w)
	ROUND3(b, c, d, e, a, 69, w)
	ROUND3(a, b, c, d, e, 70, w)
	ROUND3(e, a, b, c, d, 71, w)
	ROUND3(d, e, a, b, c, 72, w)
	ROUND3(c, d, e, a, b, 73, w)
	ROUND3(b, c, d, e, a, 74, w)
	ROUND3(a, b, c, d, e, 75, w)
	ROUND3(e, a, b, c, d, 76, w)
	ROUND3(d, e, a, b, c, 77, w)
	ROUND3(c, d, e, a, b, 78, w)
	ROUND3(b, c, d, e, a, 79, w)
        
        h0 += a;
        h1 += b;
        h2 += c;
        h3 += d;
        h4 += e;
    }
    
    output[0] = h0 >> 24;
    output[1] = (h0 >> 16) & 0xFF;
    output[2] = (h0 >> 8) & 0xFF;
    output[3] = h0 & 0xFF;
    
    output[4] = h1 >> 24;
    output[5] = (h1 >> 16) & 0xFF;
    output[6] = (h1 >> 8) & 0xFF;
    output[7] = h1 & 0xFF;
    
    output[8] = h2 >> 24;
    output[9] = (h2 >> 16) & 0xFF;
    output[10] = (h2 >> 8) & 0xFF;
    output[11] = h2 & 0xFF;
    
    output[12] = h3 >> 24;
    output[13] = (h3 >> 16) & 0xFF;
    output[14] = (h3 >> 8) & 0xFF;
    output[15] = h3 & 0xFF;
    
    output[16] = h4 >> 24;
    output[17] = (h4 >> 16) & 0xFF;
    output[18] = (h4 >> 8) & 0xFF;
    output[19] = h4 & 0xFF;
    
    
}

void inline sha1_global(const global uchar* msg, uint len, uchar* output){
    
    uint h0 = 0x67452301;
    uint h1 = 0xEFCDAB89;
    uint h2 = 0x98BADCFE;
    uint h3 = 0x10325476;
    uint h4 = 0xC3D2E1F0;
    
    uint chunks = ((len+9)/64)+1;
    uint padSpace = 64-(len%64);
    uint padInChunk;
    bool longPad;
    
    uchar msg_pad[64];
    uint w[80] = {0};
    
    if(padSpace < 9){
        padInChunk = chunks-2;
        longPad = true;
    }else{
        padInChunk = chunks-1;
        longPad = false;
    }
    
    for(uint chunk = 0;chunk<chunks;chunk++){
        
        if(chunk < padInChunk){
	    // ::memcpy(msg_pad,msg+chunk*64,64);
	    #pragma unroll
	    for (int i = 0; i < 64; i++)
		msg_pad[i]= (msg+chunk*64)[i];
        }else if(chunk == padInChunk){
            uint padStart = len%64;
            //memcpy(msg_pad,msg+chunk*64,padStart);
	    #pragma unroll
	    for (int i= 0; i < padStart; i++)
		msg_pad[i]= (msg+chunk*64)[i];
            msg_pad[padStart] = 0x80;
            if(longPad){
                // pad in last two chunks
                for(uint i = padStart+1;i<64;i++){
                    msg_pad[i] = 0;
                }
            }else{
                // pad in last chunk
                for(uint i = padStart+1;i<64-4;i++){
                    msg_pad[i] = 0;
                }
                ulong bit_len = len*8;
                msg_pad[60] = (bit_len >> 24) & 0xFF;
                msg_pad[61] = (bit_len >> 16) & 0xFF;
                msg_pad[62] = (bit_len >> 8) & 0xFF;
                msg_pad[63] = bit_len & 0xFF;
            }
        }else{
            for(uint i = 0;i<64-4;i++){
                    msg_pad[i] = 0;
            }
            ulong bit_len = len*8;
            msg_pad[60] = (bit_len >> 24) & 0xFF;
            msg_pad[61] = (bit_len >> 16) & 0xFF;
            msg_pad[62] = (bit_len >> 8) & 0xFF;
            msg_pad[63] = bit_len & 0xFF;
        }
        
        uint a = h0;
        uint b = h1;
        uint c = h2;
        uint d = h3;
        uint e = h4;

        
	ROUND0s(a, b, c, d, e,  0, w, msg_pad)
	ROUND0s(e, a, b, c, d,  1, w, msg_pad)
	ROUND0s(d, e, a, b, c,  2, w, msg_pad)
	ROUND0s(c, d, e, a, b,  3, w, msg_pad)
	ROUND0s(b, c, d, e, a,  4, w, msg_pad)
	ROUND0s(a, b, c, d, e,  5, w, msg_pad)
	ROUND0s(e, a, b, c, d,  6, w, msg_pad)
	ROUND0s(d, e, a, b, c,  7, w, msg_pad)
	ROUND0s(c, d, e, a, b,  8, w, msg_pad)
	ROUND0s(b, c, d, e, a,  9, w, msg_pad)
	ROUND0s(a, b, c, d, e, 10, w, msg_pad)
	ROUND0s(e, a, b, c, d, 11, w, msg_pad)
	ROUND0s(d, e, a, b, c, 12, w, msg_pad)
	ROUND0s(c, d, e, a, b, 13, w, msg_pad)
	ROUND0s(b, c, d, e, a, 14, w, msg_pad)
	ROUND0s(a, b, c, d, e, 15, w, msg_pad)
	ROUND0(e, a, b, c, d, 16, w)
	ROUND0(d, e, a, b, c, 17, w)
	ROUND0(c, d, e, a, b, 18, w)
	ROUND0(b, c, d, e, a, 19, w)
	ROUND1(a, b, c, d, e, 20, w)
	ROUND1(e, a, b, c, d, 21, w)
	ROUND1(d, e, a, b, c, 22, w)
	ROUND1(c, d, e, a, b, 23, w)
	ROUND1(b, c, d, e, a, 24, w)
	ROUND1(a, b, c, d, e, 25, w)
	ROUND1(e, a, b, c, d, 26, w)
	ROUND1(d, e, a, b, c, 27, w)
	ROUND1(c, d, e, a, b, 28, w)
	ROUND1(b, c, d, e, a, 29, w)
	ROUND1(a, b, c, d, e, 30, w)
	ROUND1(e, a, b, c, d, 31, w)
	ROUND1(d, e, a, b, c, 32, w)
	ROUND1(c, d, e, a, b, 33, w)
	ROUND1(b, c, d, e, a, 34, w)
	ROUND1(a, b, c, d, e, 35, w)
	ROUND1(e, a, b, c, d, 36, w)
	ROUND1(d, e, a, b, c, 37, w)
	ROUND1(c, d, e, a, b, 38, w)
	ROUND1(b, c, d, e, a, 39, w)
	ROUND2(a, b, c, d, e, 40, w)
	ROUND2(e, a, b, c, d, 41, w)
	ROUND2(d, e, a, b, c, 42, w)
	ROUND2(c, d, e, a, b, 43, w)
	ROUND2(b, c, d, e, a, 44, w)
	ROUND2(a, b, c, d, e, 45, w)
	ROUND2(e, a, b, c, d, 46, w)
	ROUND2(d, e, a, b, c, 47, w)
	ROUND2(c, d, e, a, b, 48, w)
	ROUND2(b, c, d, e, a, 49, w)
	ROUND2(a, b, c, d, e, 50, w)
	ROUND2(e, a, b, c, d, 51, w)
	ROUND2(d, e, a, b, c, 52, w)
	ROUND2(c, d, e, a, b, 53, w)
	ROUND2(b, c, d, e, a, 54, w)
	ROUND2(a, b, c, d, e, 55, w)
	ROUND2(e, a, b, c, d, 56, w)
	ROUND2(d, e, a, b, c, 57, w)
	ROUND2(c, d, e, a, b, 58, w)
	ROUND2(b, c, d, e, a, 59, w)
	ROUND3(a, b, c, d, e, 60, w)
	ROUND3(e, a, b, c, d, 61, w)
	ROUND3(d, e, a, b, c, 62, w)
	ROUND3(c, d, e, a, b, 63, w)
	ROUND3(b, c, d, e, a, 64, w)
	ROUND3(a, b, c, d, e, 65, w)
	ROUND3(e, a, b, c, d, 66, w)
	ROUND3(d, e, a, b, c, 67, w)
	ROUND3(c, d, e, a, b, 68, w)
	ROUND3(b, c, d, e, a, 69, w)
	ROUND3(a, b, c, d, e, 70, w)
	ROUND3(e, a, b, c, d, 71, w)
	ROUND3(d, e, a, b, c, 72, w)
	ROUND3(c, d, e, a, b, 73, w)
	ROUND3(b, c, d, e, a, 74, w)
	ROUND3(a, b, c, d, e, 75, w)
	ROUND3(e, a, b, c, d, 76, w)
	ROUND3(d, e, a, b, c, 77, w)
	ROUND3(c, d, e, a, b, 78, w)
	ROUND3(b, c, d, e, a, 79, w)
        
        h0 += a;
        h1 += b;
        h2 += c;
        h3 += d;
        h4 += e;
    }
    
    output[0] = h0 >> 24;
    output[1] = (h0 >> 16) & 0xFF;
    output[2] = (h0 >> 8) & 0xFF;
    output[3] = h0 & 0xFF;
    
    output[4] = h1 >> 24;
    output[5] = (h1 >> 16) & 0xFF;
    output[6] = (h1 >> 8) & 0xFF;
    output[7] = h1 & 0xFF;
    
    output[8] = h2 >> 24;
    output[9] = (h2 >> 16) & 0xFF;
    output[10] = (h2 >> 8) & 0xFF;
    output[11] = h2 & 0xFF;
    
    output[12] = h3 >> 24;
    output[13] = (h3 >> 16) & 0xFF;
    output[14] = (h3 >> 8) & 0xFF;
    output[15] = h3 & 0xFF;
    
    output[16] = h4 >> 24;
    output[17] = (h4 >> 16) & 0xFF;
    output[18] = (h4 >> 8) & 0xFF;
    output[19] = h4 & 0xFF;
    
}

void derive_key(const uchar* hash, uchar key, uchar* output){
   
    uchar key_pad[64];
    #pragma unroll
    for (int i=0; i < 64; i++)
	key_pad[i] = key;

    #pragma unroll
    for(uchar i = 0;i<20; i++)
        key_pad[i] ^= hash[i];

    sha1(key_pad,64,output);
}

void derive_private(const uchar* pass, uint klen, uchar* output){

    uchar passHash[20];
    uchar temp[40];

#pragma unroll
    for (int i=0; i < 20; i++)
	passHash[i] = 0x00;

    sha1(pass,klen,passHash);
    derive_key((uchar*)passHash, 0x36 , (uchar*)temp);
    derive_key((uchar*)passHash, 0x5c, (uchar*)(temp+20));

#pragma unroll
    for (int i=0; i < 32; i++)
	output[i] = temp[i];

}

void derive_global(const global uchar* pass, uint klen, uchar* output){

    uchar passHash[20];
    uchar temp[40];
   
    #pragma unroll
    for (int i=0; i < 20; i++)
	passHash[i] = 0x00;
    
    sha1_global(pass,klen,passHash);
    derive_key((uchar*)passHash, 0x36 , (uchar*)temp);
    derive_key((uchar*)passHash, 0x5c, (uchar*)(temp+20));
    
    #pragma unroll
    for (int i=0; i < 32; i++)
	output[i] = temp[i];

}

uint crc32(uint crc, global uchar *buf, uchar size)
{
    const global uchar *p;
    p = buf;
    crc = crc ^ ~0U;
    while (size--)
	crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
    return crc ^ ~0U;
}

kernel void zip_staes_kernel( \
	global uchar* passwords,\
	uchar pass_len,\
	global uchar *found_flag,\
	global uint *found_vector,\
	global uchar* erdData,\
	global uchar* encData,\
	global uchar* g_buffer,\
	constant uchar* iv,\
	ushort klen,\
	ushort erdSize,\
	ushort encSize\
	){
    int id = get_global_id(0);
    int lid = get_global_id(0);
    ulong size = 2*erdSize+encSize;
    global uchar *tempKey = g_buffer+(id*size); 
    global uchar *rdData = g_buffer+(id*size+erdSize);
    global uchar *vData = g_buffer+(id*size+2*erdSize);
    uchar my_pass_len = passwords[id*pass_len];
    uchar pass_buffer[32];
    uchar key[32];
    for(int i = 0;i<my_pass_len;i++){
	pass_buffer[i] = passwords[id*pass_len+1+i];
    }
   
//    printf("\npass: %c",pass_buffer[0]);
//    #pragma unroll
//    for (int i=1; i<my_pass_len; i++)
//	printf ("%c", pass_buffer[i]);

   //  if (lid == 0 && id == 0){
   //      printf("\nIV : %c \n",0);
   //      #pragma unroll
   //      for (int i=0; i<16; i++)
   //          printf ("%x ", iv[i]);
   //  }
    derive_private(pass_buffer, my_pass_len, key);

   //  if (lid == 0 && id == 0){
   //      printf("\nkey1: %c \n",pass_buffer[0]);
   //      #pragma unroll
   //      for (int i=0; i<32; i++)
   //          printf ("%x ", key[i]);
   //  }
    aes_context aes;
    Init(&aes, key, klen, iv);

    blockDecrypt(&aes, erdData, erdSize, rdData);

   //  if (lid == 0 && id == 0){
   //      printf("\nrdData: %c \n", 1);
   //      #pragma unroll
   //      for (int i=0; i<erdSize; i++)
   //          printf ("%x ", rdData[i]);
   //  }

    #pragma unroll
    for (int i=0; i<16; i++)
	tempKey[i] = iv[i];

    #pragma unroll
    for (int i=0; i<erdSize-16; i++)
	tempKey[i+16] = rdData[i];

    derive_global(tempKey, erdSize, key);   
   //  if (lid == 0 && id == 0){
   //      printf("\nkey2: %c \n",pass_buffer[0]);
   //      #pragma unroll
   //      for (int i=0; i<32; i++)
   //          printf ("%x ", key[i]);
   //  }
    aes_context aes2;
    Init(&aes2, key, klen, iv);

    blockDecrypt(&aes2, encData, encSize, vData);

  //  if (lid == 0 && id == 0){
  //      printf("\nvData: %c \n ",1);
  //      #pragma unroll
  //      for (int i=0; i<encSize; i++)
  //          printf ("%x ", vData[i]);
  //      printf("\nerdData: %c \n",2);
  //      #pragma unroll
  //      for (int i=0; i<erdSize; i++)
  //          printf ("%x ", erdData[i]);
  //      printf("\nencData: %c \n",2);
  //      #pragma unroll
  //      for (int i=0; i<encSize; i++)
  //          printf ("%x ", encData[i]);
  //  }
    uint crc;

    crc = vData[encSize-1];
    crc = (crc << 8) ^ vData[encSize-2];
    crc = (crc << 8) ^ vData[encSize-3];
    crc = (crc << 8) ^ vData[encSize-4];


    uint crc3 = crc32(0, vData, encSize-4); 
    
    if (crc != crc3){
	return;
    }
    *found_flag = 1;
    uint big_pos = id/32;
    uint small_pos = id%32;
    uint val = 0x80000000 >> small_pos;
    atomic_or(found_vector+big_pos,val);
}
